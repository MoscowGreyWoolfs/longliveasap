<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="md__c_1__users__ilya__petrov_source_repos__web_application1__web_application1__client_app__r_e_a_d_m_e" kind="page">
    <compoundname>md_C:_Users_Ilya_Petrov_source_repos_WebApplication1_WebApplication1_ClientApp_README</compoundname>
    <title>README</title>
    <detaileddescription>
<para>This project was bootstrapped with <ulink url="https://github.com/facebookincubator/create-react-app">Create React App</ulink>.</para><para>Below you will find some information on how to perform common tasks.<linebreak/>
 You can find the most recent version of this guide https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md &quot;here&quot;.</para><para><heading level="2">Table of Contents</heading>
</para><para><itemizedlist>
<listitem><para><ulink url="#updating-to-new-releases">Updating to New Releases</ulink></para></listitem><listitem><para><ulink url="#sending-feedback">Sending Feedback</ulink></para></listitem><listitem><para><ulink url="#folder-structure">Folder Structure</ulink></para></listitem><listitem><para><ulink url="#available-scripts">Available Scripts</ulink><itemizedlist>
<listitem><para><ulink url="#npm-start">npm start</ulink></para></listitem><listitem><para><ulink url="#npm-test">npm test</ulink></para></listitem><listitem><para><ulink url="#npm-run-build">npm run build</ulink></para></listitem><listitem><para><ulink url="#npm-run-eject">npm run eject</ulink></para></listitem></itemizedlist>
</para></listitem><listitem><para><ulink url="#supported-language-features-and-polyfills">Supported Language Features and Polyfills</ulink></para></listitem><listitem><para><ulink url="#syntax-highlighting-in-the-editor">Syntax Highlighting in the Editor</ulink></para></listitem><listitem><para><ulink url="#displaying-lint-output-in-the-editor">Displaying Lint Output in the Editor</ulink></para></listitem><listitem><para><ulink url="#debugging-in-the-editor">Debugging in the Editor</ulink></para></listitem><listitem><para><ulink url="#formatting-code-automatically">Formatting Code Automatically</ulink></para></listitem><listitem><para><ulink url="#changing-the-page-title">Changing the Page ``</ulink></para></listitem><listitem><para><ulink url="#installing-a-dependency">Installing a Dependency</ulink></para></listitem><listitem><para><ulink url="#importing-a-component">Importing a Component</ulink></para></listitem><listitem><para><ulink url="#code-splitting">Code Splitting</ulink></para></listitem><listitem><para><ulink url="#adding-a-stylesheet">Adding a Stylesheet</ulink></para></listitem><listitem><para><ulink url="#post-processing-css">Post-Processing CSS</ulink></para></listitem><listitem><para><ulink url="#adding-a-css-preprocessor-sass-less-etc">Adding a CSS Preprocessor (Sass, Less etc.)</ulink></para></listitem><listitem><para><ulink url="#adding-images-fonts-and-files">Adding Images, Fonts, and Files</ulink></para></listitem><listitem><para><ulink url="#using-the-public-folder">Using the `public` Folder</ulink><itemizedlist>
<listitem><para><ulink url="#changing-the-html">Changing the HTML</ulink></para></listitem><listitem><para><ulink url="#adding-assets-outside-of-the-module-system">Adding Assets Outside of the Module System</ulink></para></listitem><listitem><para><ulink url="#when-to-use-the-public-folder">When to Use the `public` Folder</ulink></para></listitem></itemizedlist>
</para></listitem><listitem><para><ulink url="#using-global-variables">Using Global Variables</ulink></para></listitem><listitem><para><ulink url="#adding-bootstrap">Adding Bootstrap</ulink><itemizedlist>
<listitem><para><ulink url="#using-a-custom-theme">Using a Custom Theme</ulink></para></listitem></itemizedlist>
</para></listitem><listitem><para><ulink url="#adding-flow">Adding Flow</ulink></para></listitem><listitem><para><ulink url="#adding-custom-environment-variables">Adding Custom Environment Variables</ulink><itemizedlist>
<listitem><para><ulink url="#referencing-environment-variables-in-the-html">Referencing Environment Variables in the HTML</ulink></para></listitem><listitem><para><ulink url="#adding-temporary-environment-variables-in-your-shell">Adding Temporary Environment Variables In Your Shell</ulink></para></listitem><listitem><para><ulink url="#adding-development-environment-variables-in-env">Adding Development Environment Variables In `.env`</ulink></para></listitem></itemizedlist>
</para></listitem><listitem><para><ulink url="#can-i-use-decorators">Can I Use Decorators?</ulink></para></listitem><listitem><para><ulink url="#integrating-with-an-api-backend">Integrating with an API Backend</ulink><itemizedlist>
<listitem><para><ulink url="#node">Node</ulink></para></listitem><listitem><para><ulink url="#ruby-on-rails">Ruby on Rails</ulink></para></listitem></itemizedlist>
</para></listitem><listitem><para><ulink url="#proxying-api-requests-in-development">Proxying API Requests in Development</ulink><itemizedlist>
<listitem><para><ulink url="#invalid-host-header-errors-after-configuring-proxy">&quot;Invalid Host Header&quot; Errors After Configuring Proxy</ulink></para></listitem><listitem><para><ulink url="#configuring-the-proxy-manually">Configuring the Proxy Manually</ulink></para></listitem><listitem><para><ulink url="#configuring-a-websocket-proxy">Configuring a WebSocket Proxy</ulink></para></listitem></itemizedlist>
</para></listitem><listitem><para><ulink url="#using-https-in-development">Using HTTPS in Development</ulink></para></listitem><listitem><para><ulink url="#generating-dynamic-meta-tags-on-the-server">Generating Dynamic `` Tags on the Server</ulink></para></listitem><listitem><para><ulink url="#pre-rendering-into-static-html-files">Pre-Rendering into Static HTML Files</ulink></para></listitem><listitem><para><ulink url="#injecting-data-from-the-server-into-the-page">Injecting Data from the Server into the Page</ulink></para></listitem><listitem><para><ulink url="#running-tests">Running Tests</ulink><itemizedlist>
<listitem><para><ulink url="#filename-conventions">Filename Conventions</ulink></para></listitem><listitem><para><ulink url="#command-line-interface">Command Line Interface</ulink></para></listitem><listitem><para><ulink url="#version-control-integration">Version Control Integration</ulink></para></listitem><listitem><para><ulink url="#writing-tests">Writing Tests</ulink></para></listitem><listitem><para><ulink url="#testing-components">Testing Components</ulink></para></listitem><listitem><para><ulink url="#using-third-party-assertion-libraries">Using Third Party Assertion Libraries</ulink></para></listitem><listitem><para><ulink url="#initializing-test-environment">Initializing Test Environment</ulink></para></listitem><listitem><para><ulink url="#focusing-and-excluding-tests">Focusing and Excluding Tests</ulink></para></listitem><listitem><para><ulink url="#coverage-reporting">Coverage Reporting</ulink></para></listitem><listitem><para><ulink url="#continuous-integration">Continuous Integration</ulink></para></listitem><listitem><para><ulink url="#disabling-jsdom">Disabling jsdom</ulink></para></listitem><listitem><para><ulink url="#snapshot-testing">Snapshot Testing</ulink></para></listitem><listitem><para><ulink url="#editor-integration">Editor Integration</ulink></para></listitem></itemizedlist>
</para></listitem><listitem><para><ulink url="#developing-components-in-isolation">Developing Components in Isolation</ulink><itemizedlist>
<listitem><para><ulink url="#getting-started-with-storybook">Getting Started with Storybook</ulink></para></listitem><listitem><para><ulink url="#getting-started-with-styleguidist">Getting Started with Styleguidist</ulink></para></listitem></itemizedlist>
</para></listitem><listitem><para><ulink url="#making-a-progressive-web-app">Making a Progressive Web App</ulink><itemizedlist>
<listitem><para><ulink url="#opting-out-of-caching">Opting Out of Caching</ulink></para></listitem><listitem><para><ulink url="#offline-first-considerations">Offline-First Considerations</ulink></para></listitem><listitem><para><ulink url="#progressive-web-app-metadata">Progressive Web App Metadata</ulink></para></listitem></itemizedlist>
</para></listitem><listitem><para><ulink url="#analyzing-the-bundle-size">Analyzing the Bundle Size</ulink></para></listitem><listitem><para><ulink url="#deployment">Deployment</ulink><itemizedlist>
<listitem><para><ulink url="#static-server">Static Server</ulink></para></listitem><listitem><para><ulink url="#other-solutions">Other Solutions</ulink></para></listitem><listitem><para><ulink url="#serving-apps-with-client-side-routing">Serving Apps with Client-Side Routing</ulink></para></listitem><listitem><para><ulink url="#building-for-relative-paths">Building for Relative Paths</ulink></para></listitem><listitem><para><ulink url="#azure">Azure</ulink></para></listitem><listitem><para><ulink url="#firebase">Firebase</ulink></para></listitem><listitem><para><ulink url="#github-pages">GitHub Pages</ulink></para></listitem><listitem><para><ulink url="#heroku">Heroku</ulink></para></listitem><listitem><para><ulink url="#netlify">Netlify</ulink></para></listitem><listitem><para><ulink url="#now">Now</ulink></para></listitem><listitem><para><ulink url="#s3-and-cloudfront">S3 and CloudFront</ulink></para></listitem><listitem><para><ulink url="#surge">Surge</ulink></para></listitem></itemizedlist>
</para></listitem><listitem><para><ulink url="#advanced-configuration">Advanced Configuration</ulink></para></listitem><listitem><para><ulink url="#troubleshooting">Troubleshooting</ulink><itemizedlist>
<listitem><para><ulink url="#npm-start-doesnt-detect-changes">`npm start` doesn’t detect changes</ulink></para></listitem><listitem><para><ulink url="#npm-test-hangs-on-macos-sierra">`npm test` hangs on macOS Sierra</ulink></para></listitem><listitem><para><ulink url="#npm-run-build-exits-too-early">`npm run build` exits too early</ulink></para></listitem><listitem><para><ulink url="#npm-run-build-fails-on-heroku">`npm run build` fails on Heroku</ulink></para></listitem><listitem><para><ulink url="#npm-run-build-fails-to-minify">`npm run build` fails to minify</ulink></para></listitem><listitem><para><ulink url="#momentjs-locales-are-missing">Moment.js locales are missing</ulink></para></listitem></itemizedlist>
</para></listitem><listitem><para><ulink url="#something-missing">Something Missing?</ulink></para></listitem></itemizedlist>
</para><para><heading level="2">Updating to New Releases</heading>
</para><para>Create React App is divided into two packages:</para><para><itemizedlist>
<listitem><para><computeroutput>create-react-app</computeroutput> is a global command-line utility that you use to create new projects.</para></listitem><listitem><para><computeroutput>react-scripts</computeroutput> is a development dependency in the generated projects (including this one).</para></listitem></itemizedlist>
</para><para>You almost never need to update <computeroutput>create-react-app</computeroutput> itself: it delegates all the setup to <computeroutput>react-scripts</computeroutput>.</para><para>When you run <computeroutput>create-react-app</computeroutput>, it always creates the project with the latest version of <computeroutput>react-scripts</computeroutput> so you’ll get all the new features and improvements in newly created apps automatically.</para><para>To update an existing project to a new version of <computeroutput>react-scripts</computeroutput>, https://github.com/facebookincubator/create-react-app/blob/master/CHANGELOG.md &quot;open the changelog&quot;, find the version you’re currently on (check <computeroutput>package.json</computeroutput> in this folder if you’re not sure), and apply the migration instructions for the newer versions.</para><para>In most cases bumping the <computeroutput>react-scripts</computeroutput> version in <computeroutput>package.json</computeroutput> and running <computeroutput>npm install</computeroutput> in this folder should be enough, but it’s good to consult the https://github.com/facebookincubator/create-react-app/blob/master/CHANGELOG.md &quot;changelog&quot; for potential breaking changes.</para><para>We commit to keeping the breaking changes minimal so you can upgrade <computeroutput>react-scripts</computeroutput> painlessly.</para><para><heading level="2">Sending Feedback</heading>
</para><para>We are always open to <ulink url="https://github.com/facebookincubator/create-react-app/issues">your feedback</ulink>.</para><para><heading level="2">Folder Structure</heading>
</para><para>After creation, your project should look like this:</para><para>``` my-app/ <ref refid="_r_e_a_d_m_e_8md" kindref="compound">README.md</ref> node_modules/ package.json public/ index.html favicon.ico src/ App.css App.js App.test.js index.css index.js logo.svg ```</para><para>For the project to build, <bold>these files must exist with exact filenames</bold>:</para><para><itemizedlist>
<listitem><para><computeroutput>public/index.html</computeroutput> is the page template;</para></listitem><listitem><para><computeroutput>src/index.js</computeroutput> is the JavaScript entry point.</para></listitem></itemizedlist>
</para><para>You can delete or rename the other files.</para><para>You may create subdirectories inside <computeroutput>src</computeroutput>. For faster rebuilds, only files inside <computeroutput>src</computeroutput> are processed by Webpack.<linebreak/>
 You need to <bold>put any JS and CSS files inside <computeroutput>src</computeroutput></bold>, otherwise Webpack won’t see them.</para><para>Only files inside <computeroutput>public</computeroutput> can be used from <computeroutput>public/index.html</computeroutput>.<linebreak/>
 Read instructions below for using assets from JavaScript and HTML.</para><para>You can, however, create more top-level directories.<linebreak/>
 They will not be included in the production build so you can use them for things like documentation.</para><para><heading level="2">Available Scripts</heading>
</para><para>In the project directory, you can run:</para><para><heading level="3"><computeroutput>npm start</computeroutput></heading>
</para><para>Runs the app in the development mode.<linebreak/>
 Open <ulink url="http://localhost:3000">http://localhost:3000</ulink> to view it in the browser.</para><para>The page will reload if you make edits.<linebreak/>
 You will also see any lint errors in the console.</para><para><heading level="3"><computeroutput>npm test</computeroutput></heading>
</para><para>Launches the test runner in the interactive watch mode.<linebreak/>
 See the section about <ulink url="#running-tests">running tests</ulink> for more information.</para><para><heading level="3"><computeroutput>npm run build</computeroutput></heading>
</para><para>Builds the app for production to the <computeroutput>build</computeroutput> folder.<linebreak/>
 It correctly bundles React in production mode and optimizes the build for the best performance.</para><para>The build is minified and the filenames include the hashes.<linebreak/>
 Your app is ready to be deployed!</para><para>See the section about <ulink url="#deployment">deployment</ulink> for more information.</para><para><heading level="3"><computeroutput>npm run eject</computeroutput></heading>
</para><para><bold>Note: this is a one-way operation. Once you <computeroutput>eject</computeroutput>, you can’t go back!</bold></para><para>If you aren’t satisfied with the build tool and configuration choices, you can <computeroutput>eject</computeroutput> at any time. This command will remove the single build dependency from your project.</para><para>Instead, it will copy all the configuration files and the transitive dependencies (Webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except <computeroutput>eject</computeroutput> will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.</para><para>You don’t have to ever use <computeroutput>eject</computeroutput>. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.</para><para><heading level="2">Supported Language Features and Polyfills</heading>
</para><para>This project supports a superset of the latest JavaScript standard.<linebreak/>
 In addition to <ulink url="https://github.com/lukehoban/es6features">ES6</ulink> syntax features, it also supports:</para><para><itemizedlist>
<listitem><para><ulink url="https://github.com/rwaldron/exponentiation-operator">Exponentiation Operator</ulink> (ES2016).</para></listitem><listitem><para><ulink url="https://github.com/tc39/ecmascript-asyncawait">Async/await</ulink> (ES2017).</para></listitem><listitem><para><ulink url="https://github.com/sebmarkbage/ecmascript-rest-spread">Object Rest/Spread Properties</ulink> (stage 3 proposal).</para></listitem><listitem><para><ulink url="https://github.com/tc39/proposal-dynamic-import">Dynamic import()</ulink> (stage 3 proposal)</para></listitem><listitem><para><ulink url="https://github.com/tc39/proposal-class-public-fields">Class Fields and Static Properties</ulink> (part of stage 3 proposal).</para></listitem><listitem><para><ulink url="https://facebook.github.io/react/docs/introducing-jsx.html">JSX</ulink> and <ulink url="https://flowtype.org/">Flow</ulink> syntax.</para></listitem></itemizedlist>
</para><para>Learn more about <ulink url="https://babeljs.io/docs/plugins/#presets-stage-x-experimental-presets-">different proposal stages</ulink>.</para><para>While we recommend using experimental proposals with some caution, Facebook heavily uses these features in the product code, so we intend to provide <ulink url="https://medium.com/@cpojer/effective-javascript-codemods-5a6686bb46fb">codemods</ulink> if any of these proposals change in the future.</para><para>Note that <bold>the project only includes a few ES6 <ulink url="https://en.wikipedia.org/wiki/Polyfill">polyfills</ulink></bold>:</para><para><itemizedlist>
<listitem><para><ulink url="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign">`Object.assign()`</ulink> via <ulink url="https://github.com/sindresorhus/object-assign">`object-assign`</ulink>.</para></listitem><listitem><para><ulink url="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">`Promise`</ulink> via <ulink url="https://github.com/then/promise">`promise`</ulink>.</para></listitem><listitem><para><ulink url="https://developer.mozilla.org/en/docs/Web/API/Fetch_API">`fetch()`</ulink> via <ulink url="https://github.com/github/fetch">`whatwg-fetch`</ulink>.</para></listitem></itemizedlist>
</para><para>If you use any other ES6+ features that need <bold>runtime support</bold> (such as <computeroutput>Array.from()</computeroutput> or <computeroutput>Symbol</computeroutput>), make sure you are including the appropriate polyfills manually, or that the browsers you are targeting already support them.</para><para><heading level="2">Syntax Highlighting in the Editor</heading>
</para><para>To configure the syntax highlighting in your favorite text editor, head to the <ulink url="https://babeljs.io/docs/editors">relevant Babel documentation page</ulink> and follow the instructions. Some of the most popular editors are covered.</para><para><heading level="2">Displaying Lint Output in the Editor</heading>
</para><para>&gt;Note: this feature is available with <computeroutput>react-scripts@0.2.0</computeroutput> and higher.<linebreak/>
 &gt;It also only works with npm 3 or higher.</para><para>Some editors, including Sublime Text, Atom, and Visual Studio Code, provide plugins for ESLint.</para><para>They are not required for linting. You should see the linter output right in your terminal as well as the browser console. However, if you prefer the lint results to appear right in your editor, there are some extra steps you can do.</para><para>You would need to install an ESLint plugin for your editor first. Then, add a file called <computeroutput>.eslintrc</computeroutput> to the project root:</para><para>```js { &quot;extends&quot;: &quot;react-app&quot; } ```</para><para>Now your editor should report the linting warnings.</para><para>Note that even if you edit your <computeroutput>.eslintrc</computeroutput> file further, these changes will <bold>only affect the editor integration</bold>. They won’t affect the terminal and in-browser lint output. This is because Create React App intentionally provides a minimal set of rules that find common mistakes.</para><para>If you want to enforce a coding style for your project, consider using <ulink url="https://github.com/jlongster/prettier">Prettier</ulink> instead of ESLint style rules.</para><para><heading level="2">Debugging in the Editor</heading>
</para><para><bold>This feature is currently only supported by <ulink url="https://code.visualstudio.com">Visual Studio Code</ulink> and <ulink url="https://www.jetbrains.com/webstorm/">WebStorm</ulink>.</bold></para><para>Visual Studio Code and WebStorm support debugging out of the box with Create React App. This enables you as a developer to write and debug your React code without leaving the editor, and most importantly it enables you to have a continuous development workflow, where context switching is minimal, as you don’t have to switch between tools.</para><para><heading level="3">Visual Studio Code</heading>
</para><para>You would need to have the latest version of <ulink url="https://code.visualstudio.com">VS Code</ulink> and VS Code <ulink url="https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome">Chrome Debugger Extension</ulink> installed.</para><para>Then add the block below to your <computeroutput>launch.json</computeroutput> file and put it inside the <computeroutput>.vscode</computeroutput> folder in your app’s root directory.</para><para>```json { &quot;version&quot;: &quot;0.2.0&quot;, &quot;configurations&quot;: [{ &quot;name&quot;: &quot;Chrome&quot;, &quot;type&quot;: &quot;chrome&quot;, &quot;request&quot;: &quot;launch&quot;, &quot;url&quot;: &quot;http://localhost:3000&quot;, &quot;webRoot&quot;: &quot;${workspaceRoot}/src&quot;, &quot;sourceMapPathOverrides&quot;: { &quot;webpack:///src/*&quot;: &quot;${webRoot}/*&quot; } }] } ``` &gt;Note: the URL may be different if you&apos;ve made adjustments via the <ulink url="#advanced-configuration">HOST or PORT environment variables</ulink>.</para><para>Start your app by running <computeroutput>npm start</computeroutput>, and start debugging in VS Code by pressing <computeroutput>F5</computeroutput> or by clicking the green debug icon. You can now write code, set breakpoints, make changes to the code, and debug your newly modified code—all from your editor.</para><para>Having problems with VS Code Debugging? Please see their <ulink url="https://github.com/Microsoft/vscode-chrome-debug/blob/master/README.md#troubleshooting">troubleshooting guide</ulink>.</para><para><heading level="3">WebStorm</heading>
</para><para>You would need to have <ulink url="https://www.jetbrains.com/webstorm/">WebStorm</ulink> and <ulink url="https://chrome.google.com/webstore/detail/jetbrains-ide-support/hmhgeddbohgjknpmjagkdomcpobmllji">JetBrains IDE Support</ulink> Chrome extension installed.</para><para>In the WebStorm menu <computeroutput>Run</computeroutput> select <computeroutput>Edit Configurations...</computeroutput>. Then click <computeroutput>+</computeroutput> and select <computeroutput>JavaScript Debug</computeroutput>. Paste <computeroutput><ulink url="http://localhost:3000">http://localhost:3000</ulink></computeroutput> into the URL field and save the configuration.</para><para>&gt;Note: the URL may be different if you&apos;ve made adjustments via the <ulink url="#advanced-configuration">HOST or PORT environment variables</ulink>.</para><para>Start your app by running <computeroutput>npm start</computeroutput>, then press <computeroutput>^D</computeroutput> on macOS or <computeroutput>F9</computeroutput> on Windows and Linux or click the green debug icon to start debugging in WebStorm.</para><para>The same way you can debug your application in IntelliJ IDEA Ultimate, PhpStorm, PyCharm Pro, and RubyMine.</para><para><heading level="2">Formatting Code Automatically</heading>
</para><para>Prettier is an opinionated code formatter with support for JavaScript, CSS and JSON. With Prettier you can format the code you write automatically to ensure a code style within your project. See the <ulink url="https://github.com/prettier/prettier">Prettier&apos;s GitHub page</ulink> for more information, and look at this <ulink url="https://prettier.github.io/prettier/">page to see it in action</ulink>.</para><para>To format our code whenever we make a commit in git, we need to install the following dependencies:</para><para>```sh npm install <ndash/>save husky lint-staged prettier ```</para><para>Alternatively you may use <computeroutput>yarn</computeroutput>:</para><para>```sh yarn add husky lint-staged prettier ```</para><para><itemizedlist>
<listitem><para><computeroutput>husky</computeroutput> makes it easy to use githooks as if they are npm scripts.</para></listitem><listitem><para><computeroutput>lint-staged</computeroutput> allows us to run scripts on staged files in git. See this <ulink url="https://medium.com/@okonetchnikov/make-linting-great-again-f3890e1ad6b8">blog post about lint-staged to learn more about it</ulink>.</para></listitem><listitem><para><computeroutput>prettier</computeroutput> is the JavaScript formatter we will run before commits.</para></listitem></itemizedlist>
</para><para>Now we can make sure every file is formatted correctly by adding a few lines to the <computeroutput>package.json</computeroutput> in the project root.</para><para>Add the following line to <computeroutput>scripts</computeroutput> section:</para><para>```diff &quot;scripts&quot;: {<itemizedlist>
<listitem><para>&quot;precommit&quot;: &quot;lint-staged&quot;, &quot;start&quot;: &quot;react-scripts start&quot;, &quot;build&quot;: &quot;react-scripts build&quot;, ```</para></listitem></itemizedlist>
</para><para>Next we add a &apos;lint-staged&apos; field to the <computeroutput>package.json</computeroutput>, for example:</para><para>```diff &quot;dependencies&quot;: { // ... },<itemizedlist>
<listitem><para>&quot;lint-staged&quot;: {</para></listitem><listitem><para>&quot;src/**.{js,jsx,json,css}&quot;: [</para></listitem><listitem><para>&quot;prettier --single-quote --write&quot;,</para></listitem><listitem><para>&quot;git add&quot;</para></listitem><listitem><para>]</para></listitem><listitem><para>}, &quot;scripts&quot;: { ```</para></listitem></itemizedlist>
</para><para>Now, whenever you make a commit, Prettier will format the changed files automatically. You can also run <computeroutput>./node_modules/.bin/prettier --single-quote --write &quot;src/**.{js,jsx}&quot;</computeroutput> to format your entire project for the first time.</para><para>Next you might want to integrate Prettier in your favorite editor. Read the section on <ulink url="https://github.com/prettier/prettier#editor-integration">Editor Integration</ulink> on the Prettier GitHub page.</para><para><heading level="2">Changing the Page <computeroutput>&lt;title&gt;</computeroutput></heading>
</para><para>You can find the source HTML file in the <computeroutput>public</computeroutput> folder of the generated project. You may edit the <computeroutput>&lt;title&gt;</computeroutput> tag in it to change the title from “React App” to anything else.</para><para>Note that normally you wouldn’t edit files in the <computeroutput>public</computeroutput> folder very often. For example, <ulink url="#adding-a-stylesheet">adding a stylesheet</ulink> is done without touching the HTML.</para><para>If you need to dynamically update the page title based on the content, you can use the browser <ulink url="https://developer.mozilla.org/en-US/docs/Web/API/Document/title">`document.title`</ulink> API. For more complex scenarios when you want to change the title from React components, you can use <ulink url="https://github.com/nfl/react-helmet">React Helmet</ulink>, a third party library.</para><para>If you use a custom server for your app in production and want to modify the title before it gets sent to the browser, you can follow advice in <ulink url="#generating-dynamic-meta-tags-on-the-server">this section</ulink>. Alternatively, you can pre-build each page as a static HTML file which then loads the JavaScript bundle, which is covered <ulink url="#pre-rendering-into-static-html-files">here</ulink>.</para><para><heading level="2">Installing a Dependency</heading>
</para><para>The generated project includes React and ReactDOM as dependencies. It also includes a set of scripts used by Create React App as a development dependency. You may install other dependencies (for example, React Router) with <computeroutput>npm</computeroutput>:</para><para>```sh npm install <ndash/>save react-router ```</para><para>Alternatively you may use <computeroutput>yarn</computeroutput>:</para><para>```sh yarn add react-router ```</para><para>This works for any library, not just <computeroutput>react-router</computeroutput>.</para><para><heading level="2">Importing a Component</heading>
</para><para>This project setup supports ES6 modules thanks to Babel.<linebreak/>
 While you can still use <computeroutput>require()</computeroutput> and <computeroutput>module.exports</computeroutput>, we encourage you to use <ulink url="http://exploringjs.com/es6/ch_modules.html">`import` and `export`</ulink> instead.</para><para>For example:</para><para><heading level="3"><computeroutput>Button.js</computeroutput></heading>
</para><para>```js import React, { Component } from &apos;react&apos;;</para><para>class Button extends Component { render() { // ... } }</para><para>export default Button; // Don’t forget to use export default! ```</para><para><heading level="3"><computeroutput>DangerButton.js</computeroutput></heading>
</para><para>```js import React, { Component } from &apos;react&apos;; import Button from &apos;./Button&apos;; // Import a component from another file</para><para>class DangerButton extends Component { render() { return &lt;Button color=&quot;red&quot;&gt;; } }</para><para>export default DangerButton; ```</para><para>Be aware of the <ulink url="http://stackoverflow.com/questions/36795819/react-native-es-6-when-should-i-use-curly-braces-for-import/36796281#36796281">difference between default and named exports</ulink>. It is a common source of mistakes.</para><para>We suggest that you stick to using default imports and exports when a module only exports a single thing (for example, a component). That’s what you get when you use <computeroutput>export default Button</computeroutput> and `import Button from &apos;./Button&apos;`.</para><para>Named exports are useful for utility modules that export several functions. A module may have at most one default export and as many named exports as you like.</para><para>Learn more about ES6 modules:</para><para><itemizedlist>
<listitem><para><ulink url="http://stackoverflow.com/questions/36795819/react-native-es-6-when-should-i-use-curly-braces-for-import/36796281#36796281">When to use the curly braces?</ulink></para></listitem><listitem><para><ulink url="http://exploringjs.com/es6/ch_modules.html">Exploring ES6: Modules</ulink></para></listitem><listitem><para><ulink url="https://leanpub.com/understandinges6/read#leanpub-auto-encapsulating-code-with-modules">Understanding ES6: Modules</ulink></para></listitem></itemizedlist>
</para><para><heading level="2">Code Splitting</heading>
</para><para>Instead of downloading the entire app before users can use it, code splitting allows you to split your code into small chunks which you can then load on demand.</para><para>This project setup supports code splitting via <ulink url="http://2ality.com/2017/01/import-operator.html#loading-code-on-demand">dynamic `import()`</ulink>. Its <ulink url="https://github.com/tc39/proposal-dynamic-import">proposal</ulink> is in stage 3. The <computeroutput>import()</computeroutput> function-like form takes the module name as an argument and returns a <ulink url="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">`Promise`</ulink> which always resolves to the namespace object of the module.</para><para>Here is an example:</para><para><heading level="3"><computeroutput>moduleA.js</computeroutput></heading>
</para><para>```js const moduleA = &apos;Hello&apos;;</para><para>export { moduleA }; ``<computeroutput> &lt;h3&gt;</computeroutput>App.js`</para><para>```js import React, { Component } from &apos;react&apos;;</para><para>class App extends Component { handleClick = () =&gt; { import(&apos;./moduleA&apos;) .then(({ moduleA }) =&gt; { // Use moduleA }) .catch(err =&gt; { // Handle failure }); };</para><para>render() { return (  &lt;button onclick=&quot;{this.handleClick}&quot;&gt;Load&lt;/button&gt;  ); } }</para><para>export default App; ```</para><para>This will make <computeroutput>moduleA.js</computeroutput> and all its unique dependencies as a separate chunk that only loads after the user clicks the &apos;Load&apos; button.</para><para>You can also use it with <computeroutput>async</computeroutput> / <computeroutput>await</computeroutput> syntax if you prefer it.</para><para><heading level="3">With React Router</heading>
</para><para>If you are using React Router check out <ulink url="http://serverless-stack.com/chapters/code-splitting-in-create-react-app.html">this tutorial</ulink> on how to use code splitting with it. You can find the companion GitHub repository <ulink url="https://github.com/AnomalyInnovations/serverless-stack-demo-client/tree/code-splitting-in-create-react-app">here</ulink>.</para><para><heading level="2">Adding a Stylesheet</heading>
</para><para>This project setup uses <ulink url="https://webpack.js.org/">Webpack</ulink> for handling all assets. Webpack offers a custom way of “extending” the concept of <computeroutput>import</computeroutput> beyond JavaScript. To express that a JavaScript file depends on a CSS file, you need to <bold>import the CSS from the JavaScript file</bold>:</para><para><heading level="3"><computeroutput>Button.css</computeroutput></heading>
</para><para>```css .Button { padding: 20px; } ```</para><para><heading level="3"><computeroutput>Button.js</computeroutput></heading>
</para><para>```js import React, { Component } from &apos;react&apos;; import &apos;./Button.css&apos;; // Tell Webpack that Button.js uses these styles</para><para>class Button extends Component { render() { // You can use them as regular CSS styles return ; } } ```</para><para><bold>This is not required for React</bold> but many people find this feature convenient. You can read about the benefits of this approach <ulink url="https://medium.com/seek-ui-engineering/block-element-modifying-your-javascript-components-d7f99fcab52b">here</ulink>. However you should be aware that this makes your code less portable to other build tools and environments than Webpack.</para><para>In development, expressing dependencies this way allows your styles to be reloaded on the fly as you edit them. In production, all CSS files will be concatenated into a single minified <computeroutput>.css</computeroutput> file in the build output.</para><para>If you are concerned about using Webpack-specific semantics, you can put all your CSS right into <computeroutput>src/index.css</computeroutput>. It would still be imported from <computeroutput>src/index.js</computeroutput>, but you could always remove that import if you later migrate to a different build tool.</para><para><heading level="2">Post-Processing CSS</heading>
</para><para></para><para>This project setup minifies your CSS and adds vendor prefixes to it automatically through <ulink url="https://github.com/postcss/autoprefixer">Autoprefixer</ulink> so you don’t need to worry about it.</para><para>For example, this:</para><para>```css .App { display: flex; flex-direction: row; align-items: center; } ```</para><para>becomes this:</para><para>```css .App { display: -webkit-box; display: -ms-flexbox; display: flex; -webkit-box-orient: horizontal; -webkit-box-direction: normal; -ms-flex-direction: row; flex-direction: row; -webkit-box-align: center; -ms-flex-align: center; align-items: center; } ```</para><para>If you need to disable autoprefixing for some reason, <ulink url="https://github.com/postcss/autoprefixer#disabling">follow this section</ulink>.</para><para><heading level="2">Adding a CSS Preprocessor (Sass, Less etc.)</heading>
</para><para></para><para>Generally, we recommend that you don’t reuse the same CSS classes across different components. For example, instead of using a <computeroutput>.Button</computeroutput> CSS class in <computeroutput>&lt;AcceptButton&gt;</computeroutput> and <computeroutput>&lt;RejectButton&gt;</computeroutput> components, we recommend creating a <computeroutput>&lt;Button&gt;</computeroutput> component with its own <computeroutput>.Button</computeroutput> styles, that both <computeroutput>&lt;AcceptButton&gt;</computeroutput> and <computeroutput>&lt;RejectButton&gt;</computeroutput> can render (but <ulink url="https://facebook.github.io/react/docs/composition-vs-inheritance.html">not inherit</ulink>).</para><para>Following this rule often makes CSS preprocessors less useful, as features like mixins and nesting are replaced by component composition. You can, however, integrate a CSS preprocessor if you find it valuable. In this walkthrough, we will be using Sass, but you can also use Less, or another alternative.</para><para>First, let’s install the command-line interface for Sass:</para><para>```sh npm install <ndash/>save node-sass-chokidar ```</para><para>Alternatively you may use <computeroutput>yarn</computeroutput>:</para><para>```sh yarn add node-sass-chokidar ```</para><para>Then in <computeroutput>package.json</computeroutput>, add the following lines to <computeroutput>scripts</computeroutput>:</para><para>```diff &quot;scripts&quot;: {<itemizedlist>
<listitem><para>&quot;build-css&quot;: &quot;node-sass-chokidar src/ -o src/&quot;,</para></listitem><listitem><para>&quot;watch-css&quot;: &quot;npm run build-css &amp;&amp; node-sass-chokidar src/ -o src/ --watch --recursive&quot;, &quot;start&quot;: &quot;react-scripts start&quot;, &quot;build&quot;: &quot;react-scripts build&quot;, &quot;test&quot;: &quot;react-scripts test --env=jsdom&quot;, ```</para></listitem></itemizedlist>
</para><para>&gt;Note: To use a different preprocessor, replace <computeroutput>build-css</computeroutput> and <computeroutput>watch-css</computeroutput> commands according to your preprocessor’s documentation.</para><para>Now you can rename <computeroutput>src/App.css</computeroutput> to <computeroutput>src/App.scss</computeroutput> and run <computeroutput>npm run watch-css</computeroutput>. The watcher will find every Sass file in <computeroutput>src</computeroutput> subdirectories, and create a corresponding CSS file next to it, in our case overwriting <computeroutput>src/App.css</computeroutput>. Since <computeroutput>src/App.js</computeroutput> still imports <computeroutput>src/App.css</computeroutput>, the styles become a part of your application. You can now edit <computeroutput>src/App.scss</computeroutput>, and <computeroutput>src/App.css</computeroutput> will be regenerated.</para><para>To share variables between Sass files, you can use Sass imports. For example, <computeroutput>src/App.scss</computeroutput> and other component style files could include <computeroutput>@import &quot;./shared.scss&quot;;</computeroutput> with variable definitions.</para><para>To enable importing files without using relative paths, you can add the <computeroutput>--include-path</computeroutput> option to the command in <computeroutput>package.json</computeroutput>.</para><para>``` &quot;build-css&quot;: &quot;node-sass-chokidar --include-path ./src --include-path ./node_modules src/ -o src/&quot;, &quot;watch-css&quot;: &quot;npm run build-css &amp;&amp; node-sass-chokidar --include-path ./src --include-path ./node_modules src/ -o src/ --watch --recursive&quot;, ```</para><para>This will allow you to do imports like</para><para>```scss  &apos;styles/_colors.scss&apos;; // assuming a styles directory under src/  &apos;nprogress/nprogress&apos;; // importing a css file from the nprogress node module ```</para><para>At this point you might want to remove all CSS files from the source control, and add <computeroutput>src/**.css</computeroutput> to your <computeroutput>.gitignore</computeroutput> file. It is generally a good practice to keep the build products outside of the source control.</para><para>As a final step, you may find it convenient to run <computeroutput>watch-css</computeroutput> automatically with <computeroutput>npm start</computeroutput>, and run <computeroutput>build-css</computeroutput> as a part of <computeroutput>npm run build</computeroutput>. You can use the <computeroutput>&amp;&amp;</computeroutput> operator to execute two scripts sequentially. However, there is no cross-platform way to run two scripts in parallel, so we will install a package for this:</para><para>```sh npm install <ndash/>save npm-run-all ```</para><para>Alternatively you may use <computeroutput>yarn</computeroutput>:</para><para>```sh yarn add npm-run-all ```</para><para>Then we can change <computeroutput>start</computeroutput> and <computeroutput>build</computeroutput> scripts to include the CSS preprocessor commands:</para><para>```diff &quot;scripts&quot;: { &quot;build-css&quot;: &quot;node-sass-chokidar src/ -o src/&quot;, &quot;watch-css&quot;: &quot;npm run build-css &amp;&amp; node-sass-chokidar src/ -o src/ --watch --recursive&quot;,<itemizedlist>
<listitem><para>&quot;start&quot;: &quot;react-scripts start&quot;,</para></listitem><listitem><para>&quot;build&quot;: &quot;react-scripts build&quot;,</para></listitem><listitem><para>&quot;start-js&quot;: &quot;react-scripts start&quot;,</para></listitem><listitem><para>&quot;start&quot;: &quot;npm-run-all -p watch-css start-js&quot;,</para></listitem><listitem><para>&quot;build-js&quot;: &quot;react-scripts build&quot;,</para></listitem><listitem><para>&quot;build&quot;: &quot;npm-run-all build-css build-js&quot;, &quot;test&quot;: &quot;react-scripts test --env=jsdom&quot;, &quot;eject&quot;: &quot;react-scripts eject&quot; } ```</para></listitem></itemizedlist>
</para><para>Now running <computeroutput>npm start</computeroutput> and <computeroutput>npm run build</computeroutput> also builds Sass files.</para><para><bold>Why <computeroutput>node-sass-chokidar</computeroutput>?</bold></para><para><computeroutput>node-sass</computeroutput> has been reported as having the following issues:</para><para><itemizedlist>
<listitem><para><computeroutput>node-sass --watch</computeroutput> has been reported to have <emphasis>performance issues</emphasis> in certain conditions when used in a virtual machine or with docker.</para></listitem><listitem><para>Infinite styles compiling <ulink url="https://github.com/facebookincubator/create-react-app/issues/1939">#1939</ulink></para></listitem><listitem><para><computeroutput>node-sass</computeroutput> has been reported as having issues with detecting new files in a directory <ulink url="https://github.com/sass/node-sass/issues/1891">#1891</ulink></para><para><computeroutput>node-sass-chokidar</computeroutput> is used here as it addresses these issues.</para></listitem></itemizedlist>
</para><para><heading level="2">Adding Images, Fonts, and Files</heading>
</para><para></para><para>With Webpack, using static assets like images and fonts works similarly to CSS.</para><para>You can **<computeroutput>import</computeroutput> a file right in a JavaScript module**. This tells Webpack to include that file in the bundle. Unlike CSS imports, importing a file gives you a string value. This value is the final path you can reference in your code, e.g. as the <computeroutput>src</computeroutput> attribute of an image or the <computeroutput>href</computeroutput> of a link to a PDF.</para><para>To reduce the number of requests to the server, importing images that are less than 10,000 bytes returns a <ulink url="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs">data URI</ulink> instead of a path. This applies to the following file extensions: bmp, gif, jpg, jpeg, and png. SVG files are excluded due to <ulink url="https://github.com/facebookincubator/create-react-app/issues/1153">#1153</ulink>.</para><para>Here is an example:</para><para>```js import React from &apos;react&apos;; import logo from &apos;./logo.png&apos;; // Tell Webpack this JS file uses this image</para><para>console.log(logo); // /logo.84287d09.png</para><para>function Header() { // Import result is the URL of your image return <image type="html" name="{logo}"></image>
; }</para><para>export default Header; ```</para><para>This ensures that when the project is built, Webpack will correctly move the images into the build folder, and provide us with correct paths.</para><para>This works in CSS too:</para><para>```css .Logo { background-image: url(./logo.png); } ```</para><para>Webpack finds all relative module references in CSS (they start with <computeroutput>./</computeroutput>) and replaces them with the final paths from the compiled bundle. If you make a typo or accidentally delete an important file, you will see a compilation error, just like when you import a non-existent JavaScript module. The final filenames in the compiled bundle are generated by Webpack from content hashes. If the file content changes in the future, Webpack will give it a different name in production so you don’t need to worry about long-term caching of assets.</para><para>Please be advised that this is also a custom feature of Webpack.</para><para><bold>It is not required for React</bold> but many people enjoy it (and React Native uses a similar mechanism for images).<linebreak/>
 An alternative way of handling static assets is described in the next section.</para><para><heading level="2">Using the <computeroutput>public</computeroutput> Folder</heading>
</para><para></para><para>&gt;Note: this feature is available with <computeroutput>react-scripts@0.5.0</computeroutput> and higher.</para><para><heading level="3">Changing the HTML</heading>
</para><para></para><para>The <computeroutput>public</computeroutput> folder contains the HTML file so you can tweak it, for example, to <ulink url="#changing-the-page-title">set the page title</ulink>. The <computeroutput>&lt;script&gt;</computeroutput> tag with the compiled code will be added to it automatically during the build process.</para><para><heading level="3">Adding Assets Outside of the Module System</heading>
</para><para></para><para>You can also add other assets to the <computeroutput>public</computeroutput> folder.</para><para>Note that we normally encourage you to <computeroutput>import</computeroutput> assets in JavaScript files instead. For example, see the sections on <ulink url="#adding-a-stylesheet">adding a stylesheet</ulink> and <ulink url="#adding-images-fonts-and-files">adding images and fonts</ulink>. This mechanism provides a number of benefits:</para><para><itemizedlist>
<listitem><para>Scripts and stylesheets get minified and bundled together to avoid extra network requests.</para></listitem><listitem><para>Missing files cause compilation errors instead of 404 errors for your users.</para></listitem><listitem><para>Result filenames include content hashes so you don’t need to worry about browsers caching their old versions.</para></listitem></itemizedlist>
</para><para>However there is an <bold>escape hatch</bold> that you can use to add an asset outside of the module system.</para><para>If you put a file into the <computeroutput>public</computeroutput> folder, it will <bold>not</bold> be processed by Webpack. Instead it will be copied into the build folder untouched. To reference assets in the <computeroutput>public</computeroutput> folder, you need to use a special variable called <computeroutput>PUBLIC_URL</computeroutput>.</para><para>Inside <computeroutput>index.html</computeroutput>, you can use it like this:</para><para>```html &lt;link rel=&quot;shortcut icon&quot; href=&quot;%PUBLIC_URL%/favicon.ico&quot;&gt; ```</para><para>Only files inside the <computeroutput>public</computeroutput> folder will be accessible by <computeroutput>PUBLIC_URL%</computeroutput> prefix. If you need to use a file from <computeroutput>src</computeroutput> or <computeroutput>node_modules</computeroutput>, you’ll have to copy it there to explicitly specify your intention to make this file a part of the build.</para><para>When you run <computeroutput>npm run build</computeroutput>, Create React App will substitute <computeroutput>PUBLIC_URL%</computeroutput> with a correct absolute path so your project works even if you use client-side routing or host it at a non-root URL.</para><para>In JavaScript code, you can use <computeroutput>process.env.PUBLIC_URL</computeroutput> for similar purposes:</para><para>```js render() { // Note: this is an escape hatch and should be used sparingly! // Normally we recommend using <computeroutput>import</computeroutput> for getting asset URLs // as described in “Adding Images and Fonts” above this section. return &lt;img src={process.env.PUBLIC_URL + &apos;/img/logo.png&apos;} /&gt;; } ```</para><para>Keep in mind the downsides of this approach:</para><para><itemizedlist>
<listitem><para>None of the files in <computeroutput>public</computeroutput> folder get post-processed or minified.</para></listitem><listitem><para>Missing files will not be called at compilation time, and will cause 404 errors for your users.</para></listitem><listitem><para>Result filenames won’t include content hashes so you’ll need to add query arguments or rename them every time they change.</para></listitem></itemizedlist>
</para><para><heading level="3">When to Use the <computeroutput>public</computeroutput> Folder</heading>
</para><para></para><para>Normally we recommend importing <ulink url="#adding-a-stylesheet">stylesheets</ulink>, <ulink url="#adding-images-fonts-and-files">images, and fonts</ulink> from JavaScript. The <computeroutput>public</computeroutput> folder is useful as a workaround for a number of less common cases:</para><para><itemizedlist>
<listitem><para>You need a file with a specific name in the build output, such as <ulink url="https://developer.mozilla.org/en-US/docs/Web/Manifest">`manifest.webmanifest`</ulink>.</para></listitem><listitem><para>You have thousands of images and need to dynamically reference their paths.</para></listitem><listitem><para>You want to include a small script like <ulink url="http://github.hubspot.com/pace/docs/welcome/">`pace.js`</ulink> outside of the bundled code.</para></listitem><listitem><para>Some library may be incompatible with Webpack and you have no other option but to include it as a <computeroutput>&lt;script&gt;</computeroutput> tag.</para></listitem></itemizedlist>
</para><para>Note that if you add a <computeroutput>&lt;script&gt;</computeroutput> that declares global variables, you also need to read the next section on using them.</para><para><heading level="2">Using Global Variables</heading>
</para><para></para><para>When you include a script in the HTML file that defines global variables and try to use one of these variables in the code, the linter will complain because it cannot see the definition of the variable.</para><para>You can avoid this by reading the global variable explicitly from the <computeroutput>window</computeroutput> object, for example:</para><para>```js const $ = window.$; ```</para><para>This makes it obvious you are using a global variable intentionally rather than because of a typo.</para><para>Alternatively, you can force the linter to ignore any line by adding <computeroutput>// eslint-disable-line</computeroutput> after it.</para><para><heading level="2">Adding Bootstrap</heading>
</para><para></para><para>You don’t have to use <ulink url="https://reactstrap.github.io/">Reactstrap</ulink> together with React but it is a popular library for integrating Bootstrap with React apps. If you need it, you can integrate it with Create React App by following these steps:</para><para>Install Reactstrap and Bootstrap from npm. React Bootstrap does not include Bootstrap CSS so this needs to be installed as well:</para><para>```sh npm install <ndash/>save reactstrap bootstrap@4 ```</para><para>Alternatively you may use <computeroutput>yarn</computeroutput>:</para><para>```sh yarn add reactstrap bootstrap@4 ```</para><para>Import Bootstrap CSS and optionally Bootstrap theme CSS in the beginning of your <computeroutput>src/index.js</computeroutput> file:</para><para>```js import &apos;bootstrap/dist/css/bootstrap.css&apos;; // Put any other imports below so that CSS from your // components takes precedence over default styles. ```</para><para>Import required React Bootstrap components within <computeroutput>src/App.js</computeroutput> file or your custom component files:</para><para>```js import { Navbar, Button } from &apos;reactstrap&apos;; ```</para><para>Now you are ready to use the imported React Bootstrap components within your component hierarchy defined in the render method. Here is an example <ulink url="https://gist.githubusercontent.com/gaearon/85d8c067f6af1e56277c82d19fd4da7b/raw/6158dd991b67284e9fc8d70b9d973efe87659d72/App.js">`App.js`</ulink> redone using React Bootstrap.</para><para><heading level="3">Using a Custom Theme</heading>
</para><para></para><para>Sometimes you might need to tweak the visual styles of Bootstrap (or equivalent package).<linebreak/>
 We suggest the following approach:</para><para><itemizedlist>
<listitem><para>Create a new package that depends on the package you wish to customize, e.g. Bootstrap.</para></listitem><listitem><para>Add the necessary build steps to tweak the theme, and publish your package on npm.</para></listitem><listitem><para>Install your own theme npm package as a dependency of your app.</para></listitem></itemizedlist>
</para><para>Here is an example of adding a <ulink url="https://medium.com/@tacomanator/customizing-create-react-app-aa9ffb88165">customized Bootstrap</ulink> that follows these steps.</para><para><heading level="2">Adding Flow</heading>
</para><para></para><para>Flow is a static type checker that helps you write code with fewer bugs. Check out this <ulink url="https://medium.com/@preethikasireddy/why-use-static-types-in-javascript-part-1-8382da1e0adb">introduction to using static types in JavaScript</ulink> if you are new to this concept.</para><para>Recent versions of <ulink url="http://flowtype.org/">Flow</ulink> work with Create React App projects out of the box.</para><para>To add Flow to a Create React App project, follow these steps:</para><para><orderedlist>
<listitem><para>Run <computeroutput>npm install --save flow-bin</computeroutput> (or <computeroutput>yarn add flow-bin</computeroutput>).</para></listitem><listitem><para>Add <computeroutput>&quot;flow&quot;: &quot;flow&quot;</computeroutput> to the <computeroutput>scripts</computeroutput> section of your <computeroutput>package.json</computeroutput>.</para></listitem><listitem><para>Run <computeroutput>npm run flow init</computeroutput> (or <computeroutput>yarn flow init</computeroutput>) to create a <ulink url="https://flowtype.org/docs/advanced-configuration.html">`.flowconfig` file</ulink> in the root directory.</para></listitem><listitem><para>Add <computeroutput>// @flow</computeroutput> to any files you want to type check (for example, to <computeroutput>src/App.js</computeroutput>).</para></listitem></orderedlist>
</para><para>Now you can run <computeroutput>npm run flow</computeroutput> (or <computeroutput>yarn flow</computeroutput>) to check the files for type errors. You can optionally use an IDE like <ulink url="https://nuclide.io/docs/languages/flow/">Nuclide</ulink> for a better integrated experience. In the future we plan to integrate it into Create React App even more closely.</para><para>To learn more about Flow, check out <ulink url="https://flowtype.org/">its documentation</ulink>.</para><para><heading level="2">Adding Custom Environment Variables</heading>
</para><para></para><para>&gt;Note: this feature is available with <computeroutput>react-scripts@0.2.3</computeroutput> and higher.</para><para>Your project can consume variables declared in your environment as if they were declared locally in your JS files. By default you will have <computeroutput>NODE_ENV</computeroutput> defined for you, and any other environment variables starting with <computeroutput>REACT_APP_</computeroutput>.</para><para><bold>The environment variables are embedded during the build time</bold>. Since Create React App produces a static HTML/CSS/JS bundle, it can’t possibly read them at runtime. To read them at runtime, you would need to load HTML into memory on the server and replace placeholders in runtime, just like <ulink url="#injecting-data-from-the-server-into-the-page">described here</ulink>. Alternatively you can rebuild the app on the server anytime you change them.</para><para>&gt;Note: You must create custom environment variables beginning with <computeroutput>REACT_APP_</computeroutput>. Any other variables except <computeroutput>NODE_ENV</computeroutput> will be ignored to avoid accidentally <ulink url="https://github.com/facebookincubator/create-react-app/issues/865#issuecomment-252199527">exposing a private key on the machine that could have the same name</ulink>. Changing any environment variables will require you to restart the development server if it is running.</para><para>These environment variables will be defined for you on <computeroutput>process.env</computeroutput>. For example, having an environment variable named <computeroutput>REACT_APP_SECRET_CODE</computeroutput> will be exposed in your JS as <computeroutput>process.env.REACT_APP_SECRET_CODE</computeroutput>.</para><para>There is also a special built-in environment variable called <computeroutput>NODE_ENV</computeroutput>. You can read it from <computeroutput>process.env.NODE_ENV</computeroutput>. When you run <computeroutput>npm start</computeroutput>, it is always equal to <computeroutput>&apos;development&apos;</computeroutput>, when you run <computeroutput>npm test</computeroutput> it is always equal to <computeroutput>&apos;test&apos;</computeroutput>, and when you run <computeroutput>npm run build</computeroutput> to make a production bundle, it is always equal to <computeroutput>&apos;production&apos;</computeroutput>. <bold>You cannot override <computeroutput>NODE_ENV</computeroutput> manually.</bold> This prevents developers from accidentally deploying a slow development build to production.</para><para>These environment variables can be useful for displaying information conditionally based on where the project is deployed or consuming sensitive data that lives outside of version control.</para><para>First, you need to have environment variables defined. For example, let’s say you wanted to consume a secret defined in the environment inside a <computeroutput>&lt;form&gt;</computeroutput>:</para><para>```jsx render() { return (  <small>You are running this application in <bold>{process.env.NODE_ENV}</bold> mode.</small> &lt;form&gt; &lt;input type=&quot;hidden&quot; defaultvalue=&quot;{process.env.REACT_APP_SECRET_CODE}&quot;&gt; &lt;/form&gt;  ); } ```</para><para>During the build, <computeroutput>process.env.REACT_APP_SECRET_CODE</computeroutput> will be replaced with the current value of the <computeroutput>REACT_APP_SECRET_CODE</computeroutput> environment variable. Remember that the <computeroutput>NODE_ENV</computeroutput> variable will be set for you automatically.</para><para>When you load the app in the browser and inspect the <computeroutput>&lt;input&gt;</computeroutput>, you will see its value set to <computeroutput>abcdef</computeroutput>, and the bold text will show the environment provided when using <computeroutput>npm start</computeroutput>:</para><para>```html  <small>You are running this application in <bold>development</bold> mode.</small> &lt;form&gt; &lt;input type=&quot;hidden&quot; value=&quot;abcdef&quot;&gt; &lt;/form&gt;  ```</para><para>The above form is looking for a variable called <computeroutput>REACT_APP_SECRET_CODE</computeroutput> from the environment. In order to consume this value, we need to have it defined in the environment. This can be done using two ways: either in your shell or in a <computeroutput>.env</computeroutput> file. Both of these ways are described in the next few sections.</para><para>Having access to the <computeroutput>NODE_ENV</computeroutput> is also useful for performing actions conditionally:</para><para>```js if (process.env.NODE_ENV !== &apos;production&apos;) { analytics.disable(); } ```</para><para>When you compile the app with <computeroutput>npm run build</computeroutput>, the minification step will strip out this condition, and the resulting bundle will be smaller.</para><para><heading level="3">Referencing Environment Variables in the HTML</heading>
</para><para></para><para>&gt;Note: this feature is available with <computeroutput>react-scripts@0.9.0</computeroutput> and higher.</para><para>You can also access the environment variables starting with <computeroutput>REACT_APP_</computeroutput> in the <computeroutput>public/index.html</computeroutput>. For example:</para><para>```html &lt;title&gt;REACT_APP_WEBSITE_NAME%&lt;/title&gt; ```</para><para>Note that the caveats from the above section apply:</para><para><itemizedlist>
<listitem><para>Apart from a few built-in variables (<computeroutput>NODE_ENV</computeroutput> and <computeroutput>PUBLIC_URL</computeroutput>), variable names must start with <computeroutput>REACT_APP_</computeroutput> to work.</para></listitem><listitem><para>The environment variables are injected at build time. If you need to inject them at runtime, <ulink url="#generating-dynamic-meta-tags-on-the-server">follow this approach instead</ulink>.</para></listitem></itemizedlist>
</para><para><heading level="3">Adding Temporary Environment Variables In Your Shell</heading>
</para><para></para><para>Defining environment variables can vary between OSes. It’s also important to know that this manner is temporary for the life of the shell session.</para><para><heading level="4">Windows (cmd.exe)</heading>
</para><para></para><para>```cmd set REACT_APP_SECRET_CODE=abcdef&amp;&amp;npm start ```</para><para>(Note: the lack of whitespace is intentional.)</para><para><heading level="4">Linux, macOS (Bash)</heading>
</para><para></para><para>```bash REACT_APP_SECRET_CODE=abcdef npm start ```</para><para><heading level="3">Adding Development Environment Variables In <computeroutput>.env</computeroutput></heading>
</para><para></para><para>&gt;Note: this feature is available with <computeroutput>react-scripts@0.5.0</computeroutput> and higher.</para><para>To define permanent environment variables, create a file called <computeroutput>.env</computeroutput> in the root of your project:</para><para>``` REACT_APP_SECRET_CODE=abcdef ```</para><para><computeroutput>.env</computeroutput> files <bold>should be</bold> checked into source control (with the exclusion of <computeroutput>.env*.local</computeroutput>).</para><para><heading level="4">What other <computeroutput>.env</computeroutput> files can be used?</heading>
</para><para></para><para>&gt;Note: this feature is <bold>available with <computeroutput>react-scripts@1.0.0</computeroutput> and higher</bold>.</para><para><itemizedlist>
<listitem><para><computeroutput>.env</computeroutput>: Default.</para></listitem><listitem><para><computeroutput>.env.local</computeroutput>: Local overrides. <bold>This file is loaded for all environments except test.</bold></para></listitem><listitem><para><computeroutput>.env.development</computeroutput>, <computeroutput>.env.test</computeroutput>, <computeroutput>.env.production</computeroutput>: Environment-specific settings.</para></listitem><listitem><para><computeroutput>.env.development.local</computeroutput>, <computeroutput>.env.test.local</computeroutput>, <computeroutput>.env.production.local</computeroutput>: Local overrides of environment-specific settings.</para></listitem></itemizedlist>
</para><para>Files on the left have more priority than files on the right:</para><para><itemizedlist>
<listitem><para><computeroutput>npm start</computeroutput>: <computeroutput>.env.development.local</computeroutput>, <computeroutput>.env.development</computeroutput>, <computeroutput>.env.local</computeroutput>, <computeroutput>.env</computeroutput></para></listitem><listitem><para><computeroutput>npm run build</computeroutput>: <computeroutput>.env.production.local</computeroutput>, <computeroutput>.env.production</computeroutput>, <computeroutput>.env.local</computeroutput>, <computeroutput>.env</computeroutput></para></listitem><listitem><para><computeroutput>npm test</computeroutput>: <computeroutput>.env.test.local</computeroutput>, <computeroutput>.env.test</computeroutput>, <computeroutput>.env</computeroutput> (note <computeroutput>.env.local</computeroutput> is missing)</para></listitem></itemizedlist>
</para><para>These variables will act as the defaults if the machine does not explicitly set them.<linebreak/>
 Please refer to the <ulink url="https://github.com/motdotla/dotenv">dotenv documentation</ulink> for more details.</para><para>&gt;Note: If you are defining environment variables for development, your CI and/or hosting platform will most likely need these defined as well. Consult their documentation how to do this. For example, see the documentation for <ulink url="https://docs.travis-ci.com/user/environment-variables/">Travis CI</ulink> or <ulink url="https://devcenter.heroku.com/articles/config-vars">Heroku</ulink>.</para><para><heading level="2">Can I Use Decorators?</heading>
</para><para></para><para>Many popular libraries use <ulink url="https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841">decorators</ulink> in their documentation.<linebreak/>
 Create React App doesn’t support decorator syntax at the moment because:</para><para><itemizedlist>
<listitem><para>It is an experimental proposal and is subject to change.</para></listitem><listitem><para>The current specification version is not officially supported by Babel.</para></listitem><listitem><para>If the specification changes, we won’t be able to write a codemod because we don’t use them internally at Facebook.</para></listitem></itemizedlist>
</para><para>However in many cases you can rewrite decorator-based code without decorators just as fine.<linebreak/>
 Please refer to these two threads for reference:</para><para><itemizedlist>
<listitem><para><ulink url="https://github.com/facebookincubator/create-react-app/issues/214">#214</ulink></para></listitem><listitem><para><ulink url="https://github.com/facebookincubator/create-react-app/issues/411">#411</ulink></para></listitem></itemizedlist>
</para><para>Create React App will add decorator support when the specification advances to a stable stage.</para><para><heading level="2">Integrating with an API Backend</heading>
</para><para></para><para>These tutorials will help you to integrate your app with an API backend running on another port, using <computeroutput>fetch()</computeroutput> to access it.</para><para><heading level="3">Node</heading>
</para><para> Check out <ulink url="https://www.fullstackreact.com/articles/using-create-react-app-with-a-server/">this tutorial</ulink>. You can find the companion GitHub repository <ulink url="https://github.com/fullstackreact/food-lookup-demo">here</ulink>.</para><para><heading level="3">Ruby on Rails</heading>
</para><para></para><para>Check out <ulink url="https://www.fullstackreact.com/articles/how-to-get-create-react-app-to-work-with-your-rails-api/">this tutorial</ulink>. You can find the companion GitHub repository <ulink url="https://github.com/fullstackreact/food-lookup-demo-rails">here</ulink>.</para><para><heading level="2">Proxying API Requests in Development</heading>
</para><para></para><para>&gt;Note: this feature is available with <computeroutput>react-scripts@0.2.3</computeroutput> and higher.</para><para>People often serve the front-end React app from the same host and port as their backend implementation.<linebreak/>
 For example, a production setup might look like this after the app is deployed:</para><para>``` / - static server returns index.html with React app /todos - static server returns index.html with React app /api/todos - server handles any /api/* requests using the backend implementation ```</para><para>Such setup is <bold>not</bold> required. However, if you <bold>do</bold> have a setup like this, it is convenient to write requests like `fetch(&apos;/api/todos&apos;)` without worrying about redirecting them to another host or port during development.</para><para>To tell the development server to proxy any unknown requests to your API server in development, add a <computeroutput>proxy</computeroutput> field to your <computeroutput>package.json</computeroutput>, for example:</para><para>```js &quot;proxy&quot;: &quot;http://localhost:4000&quot;, ```</para><para>This way, when you `fetch(&apos;/api/todos&apos;)<computeroutput>in development, the development server will recognize that it’s not a static asset, and will proxy your request to</computeroutput><ulink url="http://localhost:4000/api/todos">http://localhost:4000/api/todos</ulink><computeroutput>as a fallback. The development server will **only** attempt to send requests without</computeroutput>text/html<computeroutput>in its</computeroutput>Accept` header to the proxy.</para><para>Conveniently, this avoids <ulink url="http://stackoverflow.com/questions/21854516/understanding-ajax-cors-and-security-considerations">CORS issues</ulink> and error messages like this in development:</para><para>``` Fetch API cannot load <ulink url="http://localhost:4000/api/todos">http://localhost:4000/api/todos</ulink>. No &apos;Access-Control-Allow-Origin&apos; header is present on the requested resource. Origin &apos;<ulink url="http://localhost:3000&apos;">http://localhost:3000&apos;</ulink> is therefore not allowed access. If an opaque response serves your needs, set the request&apos;s mode to &apos;no-cors&apos; to fetch the resource with CORS disabled. ```</para><para>Keep in mind that <computeroutput>proxy</computeroutput> only has effect in development (with <computeroutput>npm start</computeroutput>), and it is up to you to ensure that URLs like <computeroutput>/api/todos</computeroutput> point to the right thing in production. You don’t have to use the <computeroutput>/api</computeroutput> prefix. Any unrecognized request without a <computeroutput>text/html</computeroutput> accept header will be redirected to the specified <computeroutput>proxy</computeroutput>.</para><para>The <computeroutput>proxy</computeroutput> option supports HTTP, HTTPS and WebSocket connections.<linebreak/>
 If the <computeroutput>proxy</computeroutput> option is <bold>not</bold> flexible enough for you, alternatively you can:</para><para><itemizedlist>
<listitem><para><ulink url="#configuring-the-proxy-manually">Configure the proxy yourself</ulink></para></listitem><listitem><para>Enable CORS on your server (<ulink url="http://enable-cors.org/server_expressjs.html">here’s how to do it for Express</ulink>).</para></listitem><listitem><para>Use <ulink url="#adding-custom-environment-variables">environment variables</ulink> to inject the right server host and port into your app.</para></listitem></itemizedlist>
</para><para><heading level="3">&quot;Invalid Host Header&quot; Errors After Configuring Proxy</heading>
</para><para></para><para>When you enable the <computeroutput>proxy</computeroutput> option, you opt into a more strict set of host checks. This is necessary because leaving the backend open to remote hosts makes your computer vulnerable to DNS rebinding attacks. The issue is explained in <ulink url="https://medium.com/webpack/webpack-dev-server-middleware-security-issues-1489d950874a">this article</ulink> and <ulink url="https://github.com/webpack/webpack-dev-server/issues/887">this issue</ulink>.</para><para>This shouldn’t affect you when developing on <computeroutput>localhost</computeroutput>, but if you develop remotely like <ulink url="https://github.com/facebookincubator/create-react-app/issues/2271">described here</ulink>, you will see this error in the browser after enabling the <computeroutput>proxy</computeroutput> option:</para><para>&gt;Invalid Host header</para><para>To work around it, you can specify your public development host in a file called <computeroutput>.env.development</computeroutput> in the root of your project:</para><para>``` HOST=mypublicdevhost.com ```</para><para>If you restart the development server now and load the app from the specified host, it should work.</para><para>If you are still having issues or if you’re using a more exotic environment like a cloud editor, you can bypass the host check completely by adding a line to <computeroutput>.env.development.local</computeroutput>. <bold>Note that this is dangerous and exposes your machine to remote code execution from malicious websites:</bold></para><para>``` <heading level="1">NOTE: THIS IS DANGEROUS!</heading>
</para><para> <heading level="1">It exposes your machine to attacks from the websites you visit.</heading>
</para><para> DANGEROUSLY_DISABLE_HOST_CHECK=true ```</para><para>We don’t recommend this approach.</para><para><heading level="3">Configuring the Proxy Manually</heading>
</para><para></para><para>&gt;Note: this feature is available with <computeroutput>react-scripts@1.0.0</computeroutput> and higher.</para><para>If the <computeroutput>proxy</computeroutput> option is <bold>not</bold> flexible enough for you, you can specify an object in the following form (in <computeroutput>package.json</computeroutput>).<linebreak/>
 You may also specify any configuration value <ulink url="https://github.com/chimurai/http-proxy-middleware#options">`http-proxy-middleware`</ulink> or <ulink url="https://github.com/nodejitsu/node-http-proxy#options">`http-proxy`</ulink> supports. ```js { // ... &quot;proxy&quot;: { &quot;/api&quot;: { &quot;target&quot;: &quot;&lt;url&gt;&quot;, &quot;ws&quot;: true // ... } } // ... } ```</para><para>All requests matching this path will be proxies, no exceptions. This includes requests for <computeroutput>text/html</computeroutput>, which the standard <computeroutput>proxy</computeroutput> option does not proxy.</para><para>If you need to specify multiple proxies, you may do so by specifying additional entries. Matches are regular expressions, so that you can use a regexp to match multiple paths. ```js { // ... &quot;proxy&quot;: { // Matches any request starting with /api &quot;/api&quot;: { &quot;target&quot;: &quot;&lt;url_1&gt;&quot;, &quot;ws&quot;: true // ... }, // Matches any request starting with /foo &quot;/foo&quot;: { &quot;target&quot;: &quot;&lt;url_2&gt;&quot;, &quot;ssl&quot;: true, &quot;pathRewrite&quot;: { &quot;^/foo&quot;: &quot;/foo/beta&quot; } // ... }, // Matches /bar/abc.html but not /bar/sub/def.html &quot;/bar/[^/]*[.]html&quot;: { &quot;target&quot;: &quot;&lt;url_3&gt;&quot;, // ... }, // Matches /baz/abc.html and /baz/sub/def.html &quot;/baz/..*[.]html&quot;: { &quot;target&quot;: &quot;&lt;url_4&gt;&quot; // ... } } // ... } ```</para><para><heading level="3">Configuring a WebSocket Proxy</heading>
</para><para></para><para>When setting up a WebSocket proxy, there are a some extra considerations to be aware of.</para><para>If you’re using a WebSocket engine like <ulink url="https://socket.io/">Socket.io</ulink>, you must have a Socket.io server running that you can use as the proxy target. Socket.io will not work with a standard WebSocket server. Specifically, don&apos;t expect Socket.io to work with <ulink url="http://websocket.org/echo.html">the websocket.org echo test</ulink>.</para><para>There’s some good documentation available for <ulink url="https://socket.io/docs/">setting up a Socket.io server</ulink>.</para><para>Standard WebSockets <bold>will</bold> work with a standard WebSocket server as well as the websocket.org echo test. You can use libraries like <ulink url="https://github.com/websockets/ws">ws</ulink> for the server, with <ulink url="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket">native WebSockets in the browser</ulink>.</para><para>Either way, you can proxy WebSocket requests manually in <computeroutput>package.json</computeroutput>:</para><para>```js { // ... &quot;proxy&quot;: { &quot;/socket&quot;: { // Your compatible WebSocket server &quot;target&quot;: &quot;ws://&lt;socket_url&gt;&quot;, // Tell http-proxy-middleware that this is a WebSocket proxy. // Also allows you to proxy WebSocket requests without an additional HTTP request // <ulink url="https://github.com/chimurai/http-proxy-middleware#external-websocket-upgrade">https://github.com/chimurai/http-proxy-middleware#external-websocket-upgrade</ulink> &quot;ws&quot;: true // ... } } // ... } ```</para><para><heading level="2">Using HTTPS in Development</heading>
</para><para></para><para>&gt;Note: this feature is available with <computeroutput>react-scripts@0.4.0</computeroutput> and higher.</para><para>You may require the dev server to serve pages over HTTPS. One particular case where this could be useful is when using <ulink url="#proxying-api-requests-in-development">the &quot;proxy&quot; feature</ulink> to proxy requests to an API server when that API server is itself serving HTTPS.</para><para>To do this, set the <computeroutput>HTTPS</computeroutput> environment variable to <computeroutput>true</computeroutput>, then start the dev server as usual with <computeroutput>npm start</computeroutput>:</para><para><heading level="4">Windows (cmd.exe)</heading>
</para><para></para><para>```cmd set HTTPS=true&amp;&amp;npm start ```</para><para>(Note: the lack of whitespace is intentional.)</para><para><heading level="4">Linux, macOS (Bash)</heading>
</para><para></para><para>```bash HTTPS=true npm start ```</para><para>Note that the server will use a self-signed certificate, so your web browser will almost definitely display a warning upon accessing the page.</para><para><heading level="2">Generating Dynamic <computeroutput>&lt;meta&gt;</computeroutput> Tags on the Server</heading>
</para><para></para><para>Since Create React App doesn’t support server rendering, you might be wondering how to make <computeroutput>&lt;meta&gt;</computeroutput> tags dynamic and reflect the current URL. To solve this, we recommend to add placeholders into the HTML, like this:</para><para>```html &lt;!doctype html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta property=&quot;og:title&quot; content=&quot;__OG_TITLE__&quot;&gt; &lt;meta property=&quot;og:description&quot; content=&quot;__OG_DESCRIPTION__&quot;&gt; ```</para><para>Then, on the server, regardless of the backend you use, you can read <computeroutput>index.html</computeroutput> into memory and replace <computeroutput>__OG_TITLE__</computeroutput>, <computeroutput>__OG_DESCRIPTION__</computeroutput>, and any other placeholders with values depending on the current URL. Just make sure to sanitize and escape the interpolated values so that they are safe to embed into HTML!</para><para>If you use a Node server, you can even share the route matching logic between the client and the server. However duplicating it also works fine in simple cases.</para><para><heading level="2">Pre-Rendering into Static HTML Files</heading>
</para><para></para><para>If you’re hosting your <computeroutput>build</computeroutput> with a static hosting provider you can use <ulink url="https://www.npmjs.com/package/react-snapshot">react-snapshot</ulink> or <ulink url="https://github.com/stereobooster/react-snap">react-snap</ulink> to generate HTML pages for each route, or relative link, in your application. These pages will then seamlessly become active, or “hydrated”, when the JavaScript bundle has loaded.</para><para>There are also opportunities to use this outside of static hosting, to take the pressure off the server when generating and caching routes.</para><para>The primary benefit of pre-rendering is that you get the core content of each page <emphasis>with</emphasis> the HTML payload—regardless of whether or not your JavaScript bundle successfully downloads. It also increases the likelihood that each route of your application will be picked up by search engines.</para><para>You can read more about <ulink url="https://medium.com/superhighfives/an-almost-static-stack-6df0a2791319">zero-configuration pre-rendering (also called snapshotting) here</ulink>.</para><para><heading level="2">Injecting Data from the Server into the Page</heading>
</para><para></para><para>Similarly to the previous section, you can leave some placeholders in the HTML that inject global variables, for example:</para><para>```js &lt;!doctype html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;script&gt; window.SERVER_DATA = <bold>SERVER_DATA</bold>; &lt;/script&gt; ```</para><para>Then, on the server, you can replace <computeroutput>__SERVER_DATA__</computeroutput> with a JSON of real data right before sending the response. The client code can then read <computeroutput>window.SERVER_DATA</computeroutput> to use it. <bold>Make sure to <ulink url="https://medium.com/node-security/the-most-common-xss-vulnerability-in-react-js-applications-2bdffbcc1fa0">sanitize the JSON before sending it to the client</ulink> as it makes your app vulnerable to XSS attacks.</bold></para><para><heading level="2">Running Tests</heading>
</para><para></para><para>&gt;Note: this feature is available with <computeroutput>react-scripts@0.3.0</computeroutput> and higher.<linebreak/>
 &gt;<ulink url="https://github.com/facebookincubator/create-react-app/blob/master/CHANGELOG.md#migrating-from-023-to-030">Read the migration guide to learn how to enable it in older projects!</ulink></para><para>Create React App uses <ulink url="https://facebook.github.io/jest/">Jest</ulink> as its test runner. To prepare for this integration, we did a <ulink url="https://facebook.github.io/jest/blog/2016/09/01/jest-15.html">major revamp</ulink> of Jest so if you heard bad things about it years ago, give it another try.</para><para>Jest is a Node-based runner. This means that the tests always run in a Node environment and not in a real browser. This lets us enable fast iteration speed and prevent flakiness.</para><para>While Jest provides browser globals such as <computeroutput>window</computeroutput> thanks to <ulink url="https://github.com/tmpvar/jsdom">jsdom</ulink>, they are only approximations of the real browser behavior. Jest is intended to be used for unit tests of your logic and your components rather than the DOM quirks.</para><para>We recommend that you use a separate tool for browser end-to-end tests if you need them. They are beyond the scope of Create React App.</para><para><heading level="3">Filename Conventions</heading>
</para><para></para><para>Jest will look for test files with any of the following popular naming conventions:</para><para><itemizedlist>
<listitem><para>Files with <computeroutput>.js</computeroutput> suffix in <computeroutput>__tests__</computeroutput> folders.</para></listitem><listitem><para>Files with <computeroutput>.test.js</computeroutput> suffix.</para></listitem><listitem><para>Files with <computeroutput>.spec.js</computeroutput> suffix.</para></listitem></itemizedlist>
</para><para>The <computeroutput>.test.js</computeroutput> / <computeroutput>.spec.js</computeroutput> files (or the <computeroutput>__tests__</computeroutput> folders) can be located at any depth under the <computeroutput>src</computeroutput> top level folder.</para><para>We recommend to put the test files (or <computeroutput>__tests__</computeroutput> folders) next to the code they are testing so that relative imports appear shorter. For example, if <computeroutput>App.test.js</computeroutput> and <computeroutput>App.js</computeroutput> are in the same folder, the test just needs to `import App from &apos;./App&apos;` instead of a long relative path. Colocation also helps find tests more quickly in larger projects.</para><para><heading level="3">Command Line Interface</heading>
</para><para></para><para>When you run <computeroutput>npm test</computeroutput>, Jest will launch in the watch mode. Every time you save a file, it will re-run the tests, just like <computeroutput>npm start</computeroutput> recompiles the code.</para><para>The watcher includes an interactive command-line interface with the ability to run all tests, or focus on a search pattern. It is designed this way so that you can keep it open and enjoy fast re-runs. You can learn the commands from the “Watch Usage” note that the watcher prints after every run:</para><para><image type="html" name="15-watch.gif"></image>
</para><para><heading level="3">Version Control Integration</heading>
</para><para></para><para>By default, when you run <computeroutput>npm test</computeroutput>, Jest will only run the tests related to files changed since the last commit. This is an optimization designed to make your tests run fast regardless of how many tests you have. However it assumes that you don’t often commit the code that doesn’t pass the tests.</para><para>Jest will always explicitly mention that it only ran tests related to the files changed since the last commit. You can also press <computeroutput>a</computeroutput> in the watch mode to force Jest to run all tests.</para><para>Jest will always run all tests on a <ulink url="#continuous-integration">continuous integration</ulink> server or if the project is not inside a Git or Mercurial repository.</para><para><heading level="3">Writing Tests</heading>
</para><para></para><para>To create tests, add <computeroutput>it()</computeroutput> (or <computeroutput>test()</computeroutput>) blocks with the name of the test and its code. You may optionally wrap them in <computeroutput>describe()</computeroutput> blocks for logical grouping but this is neither required nor recommended.</para><para>Jest provides a built-in <computeroutput>expect()</computeroutput> global function for making assertions. A basic test could look like this:</para><para>```js import sum from &apos;./sum&apos;;</para><para>it(&apos;sums numbers&apos;, () =&gt; { expect(sum(1, 2)).toEqual(3); expect(sum(2, 2)).toEqual(4); }); ```</para><para>All <computeroutput>expect()</computeroutput> matchers supported by Jest are <ulink url="https://facebook.github.io/jest/docs/en/expect.html#content">extensively documented here</ulink>.<linebreak/>
 You can also use <ulink url="https://facebook.github.io/jest/docs/en/expect.html#tohavebeencalled">`jest.fn()` and `expect(fn).toBeCalled()`</ulink> to create “spies” or mock functions.</para><para><heading level="3">Testing Components</heading>
</para><para></para><para>There is a broad spectrum of component testing techniques. They range from a “smoke test” verifying that a component renders without throwing, to shallow rendering and testing some of the output, to full rendering and testing component lifecycle and state changes.</para><para>Different projects choose different testing tradeoffs based on how often components change, and how much logic they contain. If you haven’t decided on a testing strategy yet, we recommend that you start with creating simple smoke tests for your components:</para><para>```js import React from &apos;react&apos;; import ReactDOM from &apos;react-dom&apos;; import App from &apos;./App&apos;;</para><para>it(&apos;renders without crashing&apos;, () =&gt; { const div = document.createElement(&apos;div&apos;); ReactDOM.render(&lt;App&gt;, div); }); ```</para><para>This test mounts a component and makes sure that it didn’t throw during rendering. Tests like this provide a lot value with very little effort so they are great as a starting point, and this is the test you will find in <computeroutput>src/App.test.js</computeroutput>.</para><para>When you encounter bugs caused by changing components, you will gain a deeper insight into which parts of them are worth testing in your application. This might be a good time to introduce more specific tests asserting specific expected output or behavior.</para><para>If you’d like to test components in isolation from the child components they render, we recommend using <ulink url="http://airbnb.io/enzyme/docs/api/shallow.html">`shallow()` rendering API</ulink> from <ulink url="http://airbnb.io/enzyme/">Enzyme</ulink>. To install it, run:</para><para>```sh npm install <ndash/>save enzyme enzyme-adapter-react-16 react-test-renderer ```</para><para>Alternatively you may use <computeroutput>yarn</computeroutput>:</para><para>```sh yarn add enzyme enzyme-adapter-react-16 react-test-renderer ```</para><para>As of Enzyme 3, you will need to install Enzyme along with an Adapter corresponding to the version of React you are using. (The examples above use the adapter for React 16.)</para><para>The adapter will also need to be configured in your <ulink url="#initializing-test-environment">global setup file</ulink>:</para><para><heading level="4"><computeroutput>src/setupTests.js</computeroutput></heading>
</para><para> ```js import { configure } from &apos;enzyme&apos;; import Adapter from &apos;enzyme-adapter-react-16&apos;;</para><para>configure({ adapter: new Adapter() }); ```</para><para>Now you can write a smoke test with it:</para><para>```js import React from &apos;react&apos;; import { shallow } from &apos;enzyme&apos;; import App from &apos;./App&apos;;</para><para>it(&apos;renders without crashing&apos;, () =&gt; { shallow(&lt;App&gt;); }); ```</para><para>Unlike the previous smoke test using <computeroutput>ReactDOM.render()</computeroutput>, this test only renders <computeroutput>&lt;App&gt;</computeroutput> and doesn’t go deeper. For example, even if <computeroutput>&lt;App&gt;</computeroutput> itself renders a <computeroutput>&lt;Button&gt;</computeroutput> that throws, this test will pass. Shallow rendering is great for isolated unit tests, but you may still want to create some full rendering tests to ensure the components integrate correctly. Enzyme supports <ulink url="http://airbnb.io/enzyme/docs/api/mount.html">full rendering with `mount()`</ulink>, and you can also use it for testing state changes and component lifecycle.</para><para>You can read the <ulink url="http://airbnb.io/enzyme/">Enzyme documentation</ulink> for more testing techniques. Enzyme documentation uses Chai and Sinon for assertions but you don’t have to use them because Jest provides built-in <computeroutput>expect()</computeroutput> and <computeroutput>jest.fn()</computeroutput> for spies.</para><para>Here is an example from Enzyme documentation that asserts specific output, rewritten to use Jest matchers:</para><para>```js import React from &apos;react&apos;; import { shallow } from &apos;enzyme&apos;; import App from &apos;./App&apos;;</para><para>it(&apos;renders welcome message&apos;, () =&gt; { const wrapper = shallow(&lt;App&gt;); const welcome = <heading level="2">Welcome to React</heading>
</para><para>; // expect(wrapper.contains(welcome)).to.equal(true); expect(wrapper.contains(welcome)).toEqual(true); }); ```</para><para>All Jest matchers are <ulink url="http://facebook.github.io/jest/docs/en/expect.html">extensively documented here</ulink>.<linebreak/>
 Nevertheless you can use a third-party assertion library like <ulink url="http://chaijs.com/">Chai</ulink> if you want to, as described below.</para><para>Additionally, you might find <ulink url="https://github.com/blainekasten/enzyme-matchers">jest-enzyme</ulink> helpful to simplify your tests with readable matchers. The above <computeroutput>contains</computeroutput> code can be written simpler with jest-enzyme.</para><para>```js expect(wrapper).toContainReact(welcome) ```</para><para>To enable this, install <computeroutput>jest-enzyme</computeroutput>:</para><para>```sh npm install <ndash/>save jest-enzyme ```</para><para>Alternatively you may use <computeroutput>yarn</computeroutput>:</para><para>```sh yarn add jest-enzyme ```</para><para>Import it in <ulink url="#initializing-test-environment">`src/setupTests.js`</ulink> to make its matchers available in every test:</para><para>```js import &apos;jest-enzyme&apos;; ```</para><para><heading level="3">Using Third Party Assertion Libraries</heading>
</para><para></para><para>We recommend that you use <computeroutput>expect()</computeroutput> for assertions and <computeroutput>jest.fn()</computeroutput> for spies. If you are having issues with them please <ulink url="https://github.com/facebook/jest/issues/new">file those against Jest</ulink>, and we’ll fix them. We intend to keep making them better for React, supporting, for example, <ulink url="https://github.com/facebook/jest/pull/1566">pretty-printing React elements as JSX</ulink>.</para><para>However, if you are used to other libraries, such as <ulink url="http://chaijs.com/">Chai</ulink> and <ulink url="http://sinonjs.org/">Sinon</ulink>, or if you have existing code using them that you’d like to port over, you can import them normally like this:</para><para>```js import sinon from &apos;sinon&apos;; import { expect } from &apos;chai&apos;; ```</para><para>and then use them in your tests like you normally do.</para><para><heading level="3">Initializing Test Environment</heading>
</para><para></para><para>&gt;Note: this feature is available with <computeroutput>react-scripts@0.4.0</computeroutput> and higher.</para><para>If your app uses a browser API that you need to mock in your tests or if you just need a global setup before running your tests, add a <computeroutput>src/setupTests.js</computeroutput> to your project. It will be automatically executed before running your tests.</para><para>For example:</para><para><heading level="4"><computeroutput>src/setupTests.js</computeroutput></heading>
</para><para> ```js const localStorageMock = { getItem: jest.fn(), setItem: jest.fn(), clear: jest.fn() }; global.localStorage = localStorageMock ```</para><para><heading level="3">Focusing and Excluding Tests</heading>
</para><para></para><para>You can replace <computeroutput>it()</computeroutput> with <computeroutput>xit()</computeroutput> to temporarily exclude a test from being executed.<linebreak/>
 Similarly, <computeroutput>fit()</computeroutput> lets you focus on a specific test without running any other tests.</para><para><heading level="3">Coverage Reporting</heading>
</para><para></para><para>Jest has an integrated coverage reporter that works well with ES6 and requires no configuration.<linebreak/>
 Run <computeroutput>npm test -- --coverage</computeroutput> (note extra <computeroutput>--</computeroutput> in the middle) to include a coverage report like this:</para><para><image type="html" name="5bFhnTS.png"></image>
</para><para>Note that tests run much slower with coverage so it is recommended to run it separately from your normal workflow.</para><para><heading level="4">Configuration</heading>
</para><para></para><para>The default Jest coverage configuration can be overriden by adding any of the following supported keys to a Jest config in your package.json.</para><para>Supported overrides:<itemizedlist>
<listitem><para><ulink url="https://facebook.github.io/jest/docs/en/configuration.html#collectcoveragefrom-array">`collectCoverageFrom`</ulink></para></listitem><listitem><para><ulink url="https://facebook.github.io/jest/docs/en/configuration.html#coveragereporters-array-string">`coverageReporters`</ulink></para></listitem><listitem><para><ulink url="https://facebook.github.io/jest/docs/en/configuration.html#coveragethreshold-object">`coverageThreshold`</ulink></para></listitem><listitem><para><ulink url="https://facebook.github.io/jest/docs/en/configuration.html#snapshotserializers-array-string">`snapshotSerializers`</ulink></para></listitem></itemizedlist>
</para><para>Example package.json:</para><para>```json { &quot;name&quot;: &quot;your-package&quot;, &quot;jest&quot;: { &quot;collectCoverageFrom&quot; : [ &quot;src/**.{js,jsx}&quot;, &quot;!&lt;rootDir&gt;/node_modules/&quot;, &quot;!&lt;rootDir&gt;/path/to/dir/&quot; ], &quot;coverageThreshold&quot;: { &quot;global&quot;: { &quot;branches&quot;: 90, &quot;functions&quot;: 90, &quot;lines&quot;: 90, &quot;statements&quot;: 90 } }, &quot;coverageReporters&quot;: [&quot;text&quot;], &quot;snapshotSerializers&quot;: [&quot;my-serializer-module&quot;] } } ```</para><para><heading level="3">Continuous Integration</heading>
</para><para></para><para>By default <computeroutput>npm test</computeroutput> runs the watcher with interactive CLI. However, you can force it to run tests once and finish the process by setting an environment variable called <computeroutput>CI</computeroutput>.</para><para>When creating a build of your application with <computeroutput>npm run build</computeroutput> linter warnings are not checked by default. Like <computeroutput>npm test</computeroutput>, you can force the build to perform a linter warning check by setting the environment variable <computeroutput>CI</computeroutput>. If any warnings are encountered then the build fails.</para><para>Popular CI servers already set the environment variable <computeroutput>CI</computeroutput> by default but you can do this yourself too:</para><para><heading level="3">On CI servers</heading>
</para><para> <heading level="4">Travis CI</heading>
</para><para></para><para><orderedlist>
<listitem><para>Following the <ulink url="https://docs.travis-ci.com/user/getting-started/">Travis Getting started</ulink> guide for syncing your GitHub repository with Travis. You may need to initialize some settings manually in your <ulink url="https://travis-ci.org/profile">profile</ulink> page.</para></listitem></orderedlist>
<orderedlist>
<listitem><para>Add a <computeroutput>.travis.yml</computeroutput> file to your git repository. ``` language: node_js node_js:<itemizedlist>
<listitem><para>6 cache: directories:<itemizedlist>
<listitem><para>node_modules script:</para></listitem></itemizedlist>
</para></listitem><listitem><para>npm run build</para></listitem><listitem><para>npm test ```</para></listitem></itemizedlist>
</para></listitem></orderedlist>
<orderedlist>
<listitem><para>Trigger your first build with a git push.</para></listitem></orderedlist>
<orderedlist>
<listitem><para><ulink url="https://docs.travis-ci.com/user/customizing-the-build/">Customize your Travis CI Build</ulink> if needed.</para></listitem></orderedlist>
</para><para><heading level="4">CircleCI</heading>
</para><para></para><para>Follow <ulink url="https://medium.com/@knowbody/circleci-and-zeits-now-sh-c9b7eebcd3c1">this article</ulink> to set up CircleCI with a Create React App project.</para><para><heading level="3">On your own environment</heading>
</para><para> <heading level="5">Windows (cmd.exe)</heading>
</para><para></para><para>```cmd set CI=true&amp;&amp;npm test ```</para><para>```cmd set CI=true&amp;&amp;npm run build ```</para><para>(Note: the lack of whitespace is intentional.)</para><para><heading level="5">Linux, macOS (Bash)</heading>
</para><para></para><para>```bash CI=true npm test ```</para><para>```bash CI=true npm run build ```</para><para>The test command will force Jest to run tests once instead of launching the watcher.</para><para><blockquote><para>If you find yourself doing this often in development, please <ulink url="https://github.com/facebookincubator/create-react-app/issues/new">file an issue</ulink> to tell us about your use case because we want to make watcher the best experience and are open to changing how it works to accommodate more workflows.</para><para></para></blockquote></para><para>The build command will check for linter warnings and fail if any are found.</para><para><heading level="3">Disabling jsdom</heading>
</para><para></para><para>By default, the <computeroutput>package.json</computeroutput> of the generated project looks like this:</para><para>```js &quot;scripts&quot;: { &quot;start&quot;: &quot;react-scripts start&quot;, &quot;build&quot;: &quot;react-scripts build&quot;, &quot;test&quot;: &quot;react-scripts test --env=jsdom&quot; ```</para><para>If you know that none of your tests depend on <ulink url="https://github.com/tmpvar/jsdom">jsdom</ulink>, you can safely remove <computeroutput>--env=jsdom</computeroutput>, and your tests will run faster:</para><para>```diff &quot;scripts&quot;: { &quot;start&quot;: &quot;react-scripts start&quot;, &quot;build&quot;: &quot;react-scripts build&quot;,<itemizedlist>
<listitem><para>&quot;test&quot;: &quot;react-scripts test --env=jsdom&quot;</para></listitem><listitem><para>&quot;test&quot;: &quot;react-scripts test&quot; ```</para></listitem></itemizedlist>
</para><para>To help you make up your mind, here is a list of APIs that <bold>need jsdom</bold>:</para><para><itemizedlist>
<listitem><para>Any browser globals like <computeroutput>window</computeroutput> and <computeroutput>document</computeroutput></para></listitem><listitem><para><ulink url="https://facebook.github.io/react/docs/top-level-api.html#reactdom.render">`ReactDOM.render()`</ulink></para></listitem><listitem><para><ulink url="https://facebook.github.io/react/docs/test-utils.html#renderintodocument">`TestUtils.renderIntoDocument()`</ulink> (<ulink url="https://github.com/facebook/react/blob/34761cf9a252964abfaab6faf74d473ad95d1f21/src/test/ReactTestUtils.js#L83-L91">a shortcut</ulink> for the above)</para></listitem><listitem><para><ulink url="http://airbnb.io/enzyme/docs/api/mount.html">`mount()`</ulink> in <ulink url="http://airbnb.io/enzyme/index.html">Enzyme</ulink></para></listitem></itemizedlist>
</para><para>In contrast, <bold>jsdom is not needed</bold> for the following APIs:</para><para><itemizedlist>
<listitem><para><ulink url="https://facebook.github.io/react/docs/test-utils.html#shallow-rendering">`TestUtils.createRenderer()`</ulink> (shallow rendering)</para></listitem><listitem><para><ulink url="http://airbnb.io/enzyme/docs/api/shallow.html">`shallow()`</ulink> in <ulink url="http://airbnb.io/enzyme/index.html">Enzyme</ulink></para></listitem></itemizedlist>
</para><para>Finally, jsdom is also not needed for <ulink url="http://facebook.github.io/jest/blog/2016/07/27/jest-14.html">snapshot testing</ulink>.</para><para><heading level="3">Snapshot Testing</heading>
</para><para></para><para>Snapshot testing is a feature of Jest that automatically generates text snapshots of your components and saves them on the disk so if the UI output changes, you get notified without manually writing any assertions on the component output. <ulink url="http://facebook.github.io/jest/blog/2016/07/27/jest-14.html">Read more about snapshot testing.</ulink></para><para><heading level="3">Editor Integration</heading>
</para><para></para><para>If you use <ulink url="https://code.visualstudio.com">Visual Studio Code</ulink>, there is a <ulink url="https://github.com/orta/vscode-jest">Jest extension</ulink> which works with Create React App out of the box. This provides a lot of IDE-like features while using a text editor: showing the status of a test run with potential fail messages inline, starting and stopping the watcher automatically, and offering one-click snapshot updates.</para><para><image type="html" name="a032308a-b7c8-11e6-9b34-7eeac781003f.png"></image>
</para><para><heading level="2">Developing Components in Isolation</heading>
</para><para></para><para>Usually, in an app, you have a lot of UI components, and each of them has many different states. For an example, a simple button component could have following states:</para><para><itemizedlist>
<listitem><para>In a regular state, with a text label.</para></listitem><listitem><para>In the disabled mode.</para></listitem><listitem><para>In a loading state.</para></listitem></itemizedlist>
</para><para>Usually, it’s hard to see these states without running a sample app or some examples.</para><para>Create React App doesn’t include any tools for this by default, but you can easily add <ulink url="https://storybook.js.org">Storybook for React</ulink> (<ulink url="https://github.com/storybooks/storybook">source</ulink>) or <ulink url="https://react-styleguidist.js.org/">React Styleguidist</ulink> (<ulink url="https://github.com/styleguidist/react-styleguidist">source</ulink>) to your project. <bold>These are third-party tools that let you develop components and see all their states in isolation from your app</bold>.</para><para><image type="html" name="7CIAWpB.gif"></image>
</para><para>You can also deploy your Storybook or style guide as a static app. This way, everyone in your team can view and review different states of UI components without starting a backend server or creating an account in your app.</para><para><heading level="3">Getting Started with Storybook</heading>
</para><para></para><para>Storybook is a development environment for React UI components. It allows you to browse a component library, view the different states of each component, and interactively develop and test components.</para><para>First, install the following npm package globally:</para><para>```sh npm install -g /cli ```</para><para>Then, run the following command inside your app’s directory:</para><para>```sh getstorybook ```</para><para>After that, follow the instructions on the screen.</para><para>Learn more about React Storybook:</para><para><itemizedlist>
<listitem><para>Screencast: <ulink url="https://egghead.io/lessons/react-getting-started-with-react-storybook">Getting Started with React Storybook</ulink></para></listitem><listitem><para><ulink url="https://github.com/storybooks/storybook">GitHub Repo</ulink></para></listitem><listitem><para><ulink url="https://storybook.js.org/basics/introduction/">Documentation</ulink></para></listitem><listitem><para><ulink url="https://github.com/storybooks/storybook/tree/master/addons/storyshots">Snapshot Testing UI</ulink> with Storybook + addon/storyshot</para></listitem></itemizedlist>
</para><para><heading level="3">Getting Started with Styleguidist</heading>
</para><para></para><para>Styleguidist combines a style guide, where all your components are presented on a single page with their props documentation and usage examples, with an environment for developing components in isolation, similar to Storybook. In Styleguidist you write examples in Markdown, where each code snippet is rendered as a live editable playground.</para><para>First, install Styleguidist:</para><para>```sh npm install <ndash/>save react-styleguidist ```</para><para>Alternatively you may use <computeroutput>yarn</computeroutput>:</para><para>```sh yarn add react-styleguidist ```</para><para>Then, add these scripts to your <computeroutput>package.json</computeroutput>:</para><para>```diff &quot;scripts&quot;: {<itemizedlist>
<listitem><para>&quot;styleguide&quot;: &quot;styleguidist server&quot;,</para></listitem><listitem><para>&quot;styleguide:build&quot;: &quot;styleguidist build&quot;, &quot;start&quot;: &quot;react-scripts start&quot;, ```</para></listitem></itemizedlist>
</para><para>Then, run the following command inside your app’s directory:</para><para>```sh npm run styleguide ```</para><para>After that, follow the instructions on the screen.</para><para>Learn more about React Styleguidist:</para><para><itemizedlist>
<listitem><para><ulink url="https://github.com/styleguidist/react-styleguidist">GitHub Repo</ulink></para></listitem><listitem><para><ulink url="https://react-styleguidist.js.org/docs/getting-started.html">Documentation</ulink></para></listitem></itemizedlist>
</para><para><heading level="2">Making a Progressive Web App</heading>
</para><para></para><para>By default, the production build is a fully functional, offline-first <ulink url="https://developers.google.com/web/progressive-web-apps/">Progressive Web App</ulink>.</para><para>Progressive Web Apps are faster and more reliable than traditional web pages, and provide an engaging mobile experience:</para><para><itemizedlist>
<listitem><para>All static site assets are cached so that your page loads fast on subsequent visits, regardless of network connectivity (such as 2G or 3G). Updates are downloaded in the background.</para></listitem><listitem><para>Your app will work regardless of network state, even if offline. This means your users will be able to use your app at 10,000 feet and on the subway.</para></listitem><listitem><para>On mobile devices, your app can be added directly to the user&apos;s home screen, app icon and all. You can also re-engage users using web <bold>push notifications</bold>. This eliminates the need for the app store.</para></listitem></itemizedlist>
</para><para>The <ulink url="https://github.com/goldhand/sw-precache-webpack-plugin">`sw-precache-webpack-plugin`</ulink> is integrated into production configuration, and it will take care of generating a service worker file that will automatically precache all of your local assets and keep them up to date as you deploy updates. The service worker will use a <ulink url="https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#cache-falling-back-to-network">cache-first strategy</ulink> for handling all requests for local assets, including the initial HTML, ensuring that your web app is reliably fast, even on a slow or unreliable network.</para><para><heading level="3">Opting Out of Caching</heading>
</para><para></para><para>If you would prefer not to enable service workers prior to your initial production deployment, then remove the call to <computeroutput>registerServiceWorker()</computeroutput> from <ulink url="src/index.js">`src/index.js`</ulink>.</para><para>If you had previously enabled service workers in your production deployment and have decided that you would like to disable them for all your existing users, you can swap out the call to <computeroutput>registerServiceWorker()</computeroutput> in <ulink url="src/index.js">`src/index.js`</ulink> first by modifying the service worker import: ```javascript import { unregister } from &apos;./registerServiceWorker&apos;; ``<computeroutput> and then call</computeroutput>unregister()<computeroutput>instead. After the user visits a page that has</computeroutput>unregister()<computeroutput>, the service worker will be uninstalled. Note that depending on how</computeroutput>/service-worker.js` is served, it may take up to 24 hours for the cache to be invalidated.</para><para><heading level="3">Offline-First Considerations</heading>
</para><para></para><para><orderedlist>
<listitem><para>Service workers <ulink url="https://developers.google.com/web/fundamentals/getting-started/primers/service-workers#you_need_https">require HTTPS</ulink>, although to facilitate local testing, that policy <ulink url="http://stackoverflow.com/questions/34160509/options-for-testing-service-workers-via-http/34161385#34161385">does not apply to `localhost`</ulink>. If your production web server does not support HTTPS, then the service worker registration will fail, but the rest of your web app will remain functional.</para></listitem></orderedlist>
<orderedlist>
<listitem><para>Service workers are <ulink url="https://jakearchibald.github.io/isserviceworkerready/">not currently supported</ulink> in all web browsers. Service worker registration <ulink url="src/registerServiceWorker.js">won&apos;t be attempted</ulink> on browsers that lack support.</para></listitem></orderedlist>
<orderedlist>
<listitem><para>The service worker is only enabled in the <ulink url="#deployment">production environment</ulink>, e.g. the output of <computeroutput>npm run build</computeroutput>. It&apos;s recommended that you do not enable an offline-first service worker in a development environment, as it can lead to frustration when previously cached assets are used and do not include the latest changes you&apos;ve made locally.</para></listitem></orderedlist>
<orderedlist>
<listitem><para>If you <emphasis>need</emphasis> to test your offline-first service worker locally, build the application (using <computeroutput>npm run build</computeroutput>) and run a simple http server from your build directory. After running the build script, <computeroutput>create-react-app</computeroutput> will give instructions for one way to test your production build locally and the <ulink url="#deployment">deployment instructions</ulink> have instructions for using other methods. <emphasis>Be sure to always use an incognito window to avoid complications with your browser cache.</emphasis></para></listitem></orderedlist>
<orderedlist>
<listitem><para>If possible, configure your production environment to serve the generated <computeroutput>service-worker.js</computeroutput> <ulink url="http://stackoverflow.com/questions/38843970/service-worker-javascript-update-frequency-every-24-hours">with HTTP caching disabled</ulink>. If that&apos;s not possible—<ulink url="#github-pages">GitHub Pages</ulink>, for instance, does not allow you to change the default 10 minute HTTP cache lifetime—then be aware that if you visit your production site, and then revisit again before <computeroutput>service-worker.js</computeroutput> has expired from your HTTP cache, you&apos;ll continue to get the previously cached assets from the service worker. If you have an immediate need to view your updated production deployment, performing a shift-refresh will temporarily disable the service worker and retrieve all assets from the network.</para></listitem></orderedlist>
<orderedlist>
<listitem><para>Users aren&apos;t always familiar with offline-first web apps. It can be useful to <ulink url="https://developers.google.com/web/fundamentals/instant-and-offline/offline-ux#inform_the_user_when_the_app_is_ready_for_offline_consumption">let the user know</ulink> when the service worker has finished populating your caches (showing a &quot;This web
app works offline!&quot; message) and also let them know when the service worker has fetched the latest updates that will be available the next time they load the page (showing a &quot;New content is available; please refresh.&quot; message). Showing this messages is currently left as an exercise to the developer, but as a starting point, you can make use of the logic included in <ulink url="src/registerServiceWorker.js">`src/registerServiceWorker.js`</ulink>, which demonstrates which service worker lifecycle events to listen for to detect each scenario, and which as a default, just logs appropriate messages to the JavaScript console.</para></listitem></orderedlist>
<orderedlist>
<listitem><para>By default, the generated service worker file will not intercept or cache any cross-origin traffic, like HTTP <ulink url="#integrating-with-an-api-backend">API requests</ulink>, images, or embeds loaded from a different domain. If you would like to use a runtime caching strategy for those requests, you can <ulink url="#npm-run-eject">`eject`</ulink> and then configure the <ulink url="https://github.com/GoogleChrome/sw-precache#runtimecaching-arrayobject">`runtimeCaching`</ulink> option in the <computeroutput>SWPrecacheWebpackPlugin</computeroutput> section of <ulink url="../config/webpack.config.prod.js">`webpack.config.prod.js`</ulink>.</para></listitem></orderedlist>
</para><para><heading level="3">Progressive Web App Metadata</heading>
</para><para></para><para>The default configuration includes a web app manifest located at <ulink url="public/manifest.json">`public/manifest.json`</ulink>, that you can customize with details specific to your web application.</para><para>When a user adds a web app to their homescreen using Chrome or Firefox on Android, the metadata in <ulink url="public/manifest.json">`manifest.json`</ulink> determines what icons, names, and branding colors to use when the web app is displayed. <ulink url="https://developers.google.com/web/fundamentals/engage-and-retain/web-app-manifest/">The Web App Manifest guide</ulink> provides more context about what each field means, and how your customizations will affect your users&apos; experience.</para><para><heading level="2">Analyzing the Bundle Size</heading>
</para><para></para><para><ulink url="https://www.npmjs.com/package/source-map-explorer">Source map explorer</ulink> analyzes JavaScript bundles using the source maps. This helps you understand where code bloat is coming from.</para><para>To add Source map explorer to a Create React App project, follow these steps:</para><para>```sh npm install <ndash/>save source-map-explorer ```</para><para>Alternatively you may use <computeroutput>yarn</computeroutput>:</para><para>```sh yarn add source-map-explorer ```</para><para>Then in <computeroutput>package.json</computeroutput>, add the following line to <computeroutput>scripts</computeroutput>:</para><para>```diff &quot;scripts&quot;: {<itemizedlist>
<listitem><para>&quot;analyze&quot;: &quot;source-map-explorer build/static/js/main.*&quot;, &quot;start&quot;: &quot;react-scripts start&quot;, &quot;build&quot;: &quot;react-scripts build&quot;, &quot;test&quot;: &quot;react-scripts test --env=jsdom&quot;, ```</para></listitem></itemizedlist>
</para><para>Then to analyze the bundle run the production build then run the analyze script.</para><para>``` npm run build npm run analyze ```</para><para><heading level="2">Deployment</heading>
</para><para></para><para><computeroutput>npm run build</computeroutput> creates a <computeroutput>build</computeroutput> directory with a production build of your app. Set up your favourite HTTP server so that a visitor to your site is served <computeroutput>index.html</computeroutput>, and requests to static paths like <computeroutput>/static/js/main.&lt;hash&gt;.js</computeroutput> are served with the contents of the <computeroutput>/static/js/main.&lt;hash&gt;.js</computeroutput> file.</para><para><heading level="3">Static Server</heading>
</para><para></para><para>For environments using <ulink url="https://nodejs.org/">Node</ulink>, the easiest way to handle this would be to install <ulink url="https://github.com/zeit/serve">serve</ulink> and let it handle the rest:</para><para>```sh npm install -g serve serve -s build ```</para><para>The last command shown above will serve your static site on the port <bold>5000</bold>. Like many of <ulink url="https://github.com/zeit/serve">serve</ulink>’s internal settings, the port can be adjusted using the <computeroutput>-p</computeroutput> or <computeroutput>--port</computeroutput> flags.</para><para>Run this command to get a full list of the options available:</para><para>```sh serve -h ```</para><para><heading level="3">Other Solutions</heading>
</para><para></para><para>You don’t necessarily need a static server in order to run a Create React App project in production. It works just as fine integrated into an existing dynamic one.</para><para>Here’s a programmatic example using <ulink url="https://nodejs.org/">Node</ulink> and <ulink url="http://expressjs.com/">Express</ulink>:</para><para>```javascript const express = require(&apos;express&apos;); const path = require(&apos;path&apos;); const app = express();</para><para>app.use(express.static(path.join(__dirname, &apos;build&apos;)));</para><para>app.get(&apos;/&apos;, function (req, res) { res.sendFile(path.join(__dirname, &apos;build&apos;, &apos;index.html&apos;)); });</para><para>app.listen(9000); ```</para><para>The choice of your server software isn’t important either. Since Create React App is completely platform-agnostic, there’s no need to explicitly use Node.</para><para>The <computeroutput>build</computeroutput> folder with static assets is the only output produced by Create React App.</para><para>However this is not quite enough if you use client-side routing. Read the next section if you want to support URLs like <computeroutput>/todos/42</computeroutput> in your single-page app.</para><para><heading level="3">Serving Apps with Client-Side Routing</heading>
</para><para></para><para>If you use routers that use the HTML5 <ulink url="https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries">`pushState` history API</ulink> under the hood (for example, <ulink url="https://github.com/ReactTraining/react-router">React Router</ulink> with <computeroutput>browserHistory</computeroutput>), many static file servers will fail. For example, if you used React Router with a route for <computeroutput>/todos/42</computeroutput>, the development server will respond to <computeroutput>localhost:3000/todos/42</computeroutput> properly, but an Express serving a production build as above will not.</para><para>This is because when there is a fresh page load for a <computeroutput>/todos/42</computeroutput>, the server looks for the file <computeroutput>build/todos/42</computeroutput> and does not find it. The server needs to be configured to respond to a request to <computeroutput>/todos/42</computeroutput> by serving <computeroutput>index.html</computeroutput>. For example, we can amend our Express example above to serve <computeroutput>index.html</computeroutput> for any unknown paths:</para><para>```diff app.use(express.static(path.join(__dirname, &apos;build&apos;)));</para><para>-app.get(&apos;/&apos;, function (req, res) { +app.get(&apos;/*&apos;, function (req, res) { res.sendFile(path.join(__dirname, &apos;build&apos;, &apos;index.html&apos;)); }); ```</para><para>If you’re using <ulink url="https://httpd.apache.org/">Apache HTTP Server</ulink>, you need to create a <computeroutput>.htaccess</computeroutput> file in the <computeroutput>public</computeroutput> folder that looks like this:</para><para>``` Options -MultiViews RewriteEngine On RewriteCond %{REQUEST_FILENAME} !-f RewriteRule ^ index.html [QSA,L] ```</para><para>It will get copied to the <computeroutput>build</computeroutput> folder when you run <computeroutput>npm run build</computeroutput>.</para><para>If you’re using <ulink url="http://tomcat.apache.org/">Apache Tomcat</ulink>, you need to follow <ulink url="https://stackoverflow.com/a/41249464/4878474">this Stack Overflow answer</ulink>.</para><para>Now requests to <computeroutput>/todos/42</computeroutput> will be handled correctly both in development and in production.</para><para>On a production build, and in a browser that supports <ulink url="https://developers.google.com/web/fundamentals/getting-started/primers/service-workers">service workers</ulink>, the service worker will automatically handle all navigation requests, like for <computeroutput>/todos/42</computeroutput>, by serving the cached copy of your <computeroutput>index.html</computeroutput>. This service worker navigation routing can be configured or disabled by <ulink url="#npm-run-eject">`eject`ing</ulink> and then modifying the <ulink url="https://github.com/GoogleChrome/sw-precache#navigatefallback-string">`navigateFallback`</ulink> and <ulink url="https://github.com/GoogleChrome/sw-precache#navigatefallbackwhitelist-arrayregexp">`navigateFallbackWhitelist`</ulink> options of the <computeroutput>SWPreachePlugin</computeroutput> <ulink url="../config/webpack.config.prod.js">configuration</ulink>.</para><para>When users install your app to the homescreen of their device the default configuration will make a shortcut to <computeroutput>/index.html</computeroutput>. This may not work for client-side routers which expect the app to be served from <computeroutput>/</computeroutput>. Edit the web app manifest at <ulink url="public/manifest.json">`public/manifest.json`</ulink> and change <computeroutput>start_url</computeroutput> to match the required URL scheme, for example:</para><para>```js &quot;start_url&quot;: &quot;.&quot;, ```</para><para><heading level="3">Building for Relative Paths</heading>
</para><para></para><para>By default, Create React App produces a build assuming your app is hosted at the server root.<linebreak/>
 To override this, specify the <computeroutput>homepage</computeroutput> in your <computeroutput>package.json</computeroutput>, for example:</para><para>```js &quot;homepage&quot;: &quot;http://mywebsite.com/relativepath&quot;, ```</para><para>This will let Create React App correctly infer the root path to use in the generated HTML file.</para><para><bold>Note</bold>: If you are using <computeroutput>react-router@^4</computeroutput>, you can root <computeroutput>&lt;Link&gt;</computeroutput>s using the <computeroutput>basename</computeroutput> prop on any <computeroutput>&lt;Router&gt;</computeroutput>.<linebreak/>
 More information <ulink url="https://reacttraining.com/react-router/web/api/BrowserRouter/basename-string">here</ulink>.<linebreak/>
 <linebreak/>
 For example: ```js &lt;BrowserRouter basename=&quot;/calendar&quot;&gt; &lt;Link to=&quot;/today&quot;&gt; // renders <ulink url="/calendar/today">``` Serving the Same Build from Different Paths &gt;Note: this feature is available with <computeroutput>react-scripts@0.9.0</computeroutput> and higher. If you are not using the HTML5 <computeroutput>pushState</computeroutput> history API or not using client-side routing at all, it is unnecessary to specify the URL from which your app will be served. Instead, you can put this in your <computeroutput>package.json</computeroutput>: ```js &quot;homepage&quot;: &quot;.&quot;, ``` This will make sure that all the asset paths are relative to <computeroutput>index.html</computeroutput>. You will then be able to move your app from <computeroutput>http://mywebsite.com</computeroutput> to <computeroutput>http://mywebsite.com/relativepath</computeroutput> or even <computeroutput>http://mywebsite.com/relative/path</computeroutput> without having to rebuild it. Azure</ulink></para><para>See <ulink url="https://medium.com/@to_pe/deploying-create-react-app-on-microsoft-azure-c0f6686a4321">this</ulink> blog post on how to deploy your React app to Microsoft Azure.</para><para><heading level="3"><ulink url="https://firebase.google.com/">Firebase</ulink></heading>
</para><para></para><para>Install the Firebase CLI if you haven’t already by running <computeroutput>npm install -g firebase-tools</computeroutput>. Sign up for a <ulink url="https://console.firebase.google.com/">Firebase account</ulink> and create a new project. Run <computeroutput>firebase login</computeroutput> and login with your previous created Firebase account.</para><para>Then run the <computeroutput>firebase init</computeroutput> command from your project’s root. You need to choose the <bold>Hosting: Configure and deploy Firebase Hosting sites</bold> and choose the Firebase project you created in the previous step. You will need to agree with <computeroutput>database.rules.json</computeroutput> being created, choose <computeroutput>build</computeroutput> as the public directory, and also agree to <bold>Configure as a single-page app</bold> by replying with <computeroutput>y</computeroutput>.</para><para>```sh === Project Setup</para><para> First, let&apos;s associate this project directory with a Firebase project. You can create multiple project aliases by running firebase use <ndash/>add, but for now we&apos;ll just set up a default project.</para><para> ? What Firebase project do you want to associate as default? Example app (example-app-fd690)</para><para> === Database Setup</para><para> Firebase Realtime Database Rules allow you to define how your data should be structured and when your data can be read from and written to.</para><para> ? What file should be used for Database Rules? database.rules.json ✔ Database Rules for example-app-fd690 have been downloaded to database.rules.json. Future modifications to database.rules.json will update Database Rules when you run firebase deploy.</para><para> === Hosting Setup</para><para> Your public directory is the folder (relative to your project directory) that will contain Hosting assets to uploaded with firebase deploy. If you have a build process for your assets, use your build&apos;s output directory.</para><para> ? What do you want to use as your public directory? build ? Configure as a single-page app (rewrite all urls to /index.html)? Yes ✔ Wrote build/index.html</para><para> i Writing configuration info to firebase.json... i Writing project information to .firebaserc...</para><para> ✔ Firebase initialization complete! ```</para><para>Now, after you create a production build with <computeroutput>npm run build</computeroutput>, you can deploy it by running <computeroutput>firebase deploy</computeroutput>.</para><para>```sh === Deploying to &apos;example-app-fd690&apos;...</para><para> i deploying database, hosting ✔ database: rules ready to deploy. i hosting: preparing build directory for upload... Uploading: [============================== ] 75✔ hosting: build folder uploaded successfully ✔ hosting: 8 files uploaded successfully i starting release process (may take several minutes)...</para><para> ✔ Deploy complete!</para><para> Project Console: <ulink url="https://console.firebase.google.com/project/example-app-fd690/overview">https://console.firebase.google.com/project/example-app-fd690/overview</ulink> Hosting URL: <ulink url="https://example-app-fd690.firebaseapp.com">https://example-app-fd690.firebaseapp.com</ulink> ```</para><para>For more information see <ulink url="https://firebase.google.com/docs/web/setup">Add Firebase to your JavaScript Project</ulink>.</para><para><heading level="3"><ulink url="https://pages.github.com/">GitHub Pages</ulink></heading>
</para><para></para><para>&gt;Note: this feature is available with <computeroutput>react-scripts@0.2.0</computeroutput> and higher.</para><para><heading level="4">Step 1: Add <computeroutput>homepage</computeroutput> to <computeroutput>package.json</computeroutput></heading>
</para><para></para><para><bold>The step below is important!</bold><linebreak/>
 <bold>If you skip it, your app will not deploy correctly.</bold></para><para>Open your <computeroutput>package.json</computeroutput> and add a <computeroutput>homepage</computeroutput> field:</para><para>```js &quot;homepage&quot;: &quot;https://myusername.github.io/my-app&quot;, ```</para><para>Create React App uses the <computeroutput>homepage</computeroutput> field to determine the root URL in the built HTML file.</para><para><heading level="4">Step 2: Install <computeroutput>gh-pages</computeroutput> and add <computeroutput>deploy</computeroutput> to <computeroutput>scripts</computeroutput> in <computeroutput>package.json</computeroutput></heading>
</para><para></para><para>Now, whenever you run <computeroutput>npm run build</computeroutput>, you will see a cheat sheet with instructions on how to deploy to GitHub Pages.</para><para>To publish it at <ulink url="https://myusername.github.io/my-app">https://myusername.github.io/my-app</ulink>, run:</para><para>```sh npm install <ndash/>save gh-pages ```</para><para>Alternatively you may use <computeroutput>yarn</computeroutput>:</para><para>```sh yarn add gh-pages ```</para><para>Add the following scripts in your <computeroutput>package.json</computeroutput>:</para><para>```diff &quot;scripts&quot;: {<itemizedlist>
<listitem><para>&quot;predeploy&quot;: &quot;npm run build&quot;,</para></listitem><listitem><para>&quot;deploy&quot;: &quot;gh-pages -d build&quot;, &quot;start&quot;: &quot;react-scripts start&quot;, &quot;build&quot;: &quot;react-scripts build&quot;, ```</para></listitem></itemizedlist>
</para><para>The <computeroutput>predeploy</computeroutput> script will run automatically before <computeroutput>deploy</computeroutput> is run.</para><para><heading level="4">Step 3: Deploy the site by running <computeroutput>npm run deploy</computeroutput></heading>
</para><para></para><para>Then run:</para><para>```sh npm run deploy ```</para><para><heading level="4">Step 4: Ensure your project’s settings use <computeroutput>gh-pages</computeroutput></heading>
</para><para></para><para>Finally, make sure <bold>GitHub Pages</bold> option in your GitHub project settings is set to use the <computeroutput>gh-pages</computeroutput> branch:</para><para><image type="html" name="HUjEr9l.png"></image>
</para><para><heading level="4">Step 5: Optionally, configure the domain</heading>
</para><para></para><para>You can configure a custom domain with GitHub Pages by adding a <computeroutput>CNAME</computeroutput> file to the <computeroutput>public/</computeroutput> folder.</para><para><heading level="4">Notes on client-side routing</heading>
</para><para></para><para>GitHub Pages doesn’t support routers that use the HTML5 <computeroutput>pushState</computeroutput> history API under the hood (for example, React Router using <computeroutput>browserHistory</computeroutput>). This is because when there is a fresh page load for a url like <computeroutput><ulink url="http://user.github.io/todomvc/todos/42">http://user.github.io/todomvc/todos/42</ulink></computeroutput>, where <computeroutput>/todos/42</computeroutput> is a frontend route, the GitHub Pages server returns 404 because it knows nothing of <computeroutput>/todos/42</computeroutput>. If you want to add a router to a project hosted on GitHub Pages, here are a couple of solutions:</para><para><itemizedlist>
<listitem><para>You could switch from using HTML5 history API to routing with hashes. If you use React Router, you can switch to <computeroutput>hashHistory</computeroutput> for this effect, but the URL will be longer and more verbose (for example, <computeroutput><ulink url="http://user.github.io/todomvc/#/todos/42?_k=yknaj">http://user.github.io/todomvc/#/todos/42?_k=yknaj</ulink></computeroutput>). <ulink url="https://reacttraining.com/react-router/web/api/Router">Read more</ulink> about different history implementations in React Router.</para></listitem><listitem><para>Alternatively, you can use a trick to teach GitHub Pages to handle 404 by redirecting to your <computeroutput>index.html</computeroutput> page with a special redirect parameter. You would need to add a <computeroutput>404.html</computeroutput> file with the redirection code to the <computeroutput>build</computeroutput> folder before deploying your project, and you’ll need to add code handling the redirect parameter to <computeroutput>index.html</computeroutput>. You can find a detailed explanation of this technique <ulink url="https://github.com/rafrex/spa-github-pages">in this guide</ulink>.</para></listitem></itemizedlist>
</para><para><heading level="3"><ulink url="https://www.heroku.com/">Heroku</ulink></heading>
</para><para></para><para>Use the <ulink url="https://github.com/mars/create-react-app-buildpack">Heroku Buildpack for Create React App</ulink>.<linebreak/>
 You can find instructions in <ulink url="https://blog.heroku.com/deploying-react-with-zero-configuration">Deploying React with Zero Configuration</ulink>.</para><para><heading level="4">Resolving Heroku Deployment Errors</heading>
</para><para></para><para>Sometimes <computeroutput>npm run build</computeroutput> works locally but fails during deploy via Heroku. Following are the most common cases.</para><para><heading level="5">&quot;Module not found: Error: Cannot resolve &apos;file&apos; or &apos;directory&apos;&quot;</heading>
</para><para></para><para>If you get something like this:</para><para>``` remote: Failed to create a production build. Reason: remote: Module not found: Error: Cannot resolve &apos;file&apos; or &apos;directory&apos; MyDirectory in /tmp/build_1234/src ```</para><para>It means you need to ensure that the lettercase of the file or directory you <computeroutput>import</computeroutput> matches the one you see on your filesystem or on GitHub.</para><para>This is important because Linux (the operating system used by Heroku) is case sensitive. So <computeroutput>MyDirectory</computeroutput> and <computeroutput>mydirectory</computeroutput> are two distinct directories and thus, even though the project builds locally, the difference in case breaks the <computeroutput>import</computeroutput> statements on Heroku remotes.</para><para><heading level="5">&quot;Could not find a required file.&quot;</heading>
</para><para></para><para>If you exclude or ignore necessary files from the package you will see a error similar this one:</para><para>``` remote: Could not find a required file. remote: Name: <computeroutput>index.html</computeroutput> remote: Searched in: /tmp/build_a2875fc163b209225122d68916f1d4df/public remote: remote: npm ERR! Linux 3.13.0-105-generic remote: npm ERR! argv &quot;/tmp/build_a2875fc163b209225122d68916f1d4df/.heroku/node/bin/node&quot; &quot;/tmp/build_a2875fc163b209225122d68916f1d4df/.heroku/node/bin/npm&quot; &quot;run&quot; &quot;build&quot; ```</para><para>In this case, ensure that the file is there with the proper lettercase and that’s not ignored on your local <computeroutput>.gitignore</computeroutput> or <computeroutput>~/.gitignore_global</computeroutput>.</para><para><heading level="3"><ulink url="https://www.netlify.com/">Netlify</ulink></heading>
</para><para></para><para><bold>To do a manual deploy to Netlify’s CDN:</bold></para><para>```sh npm install netlify-cli netlify deploy ```</para><para>Choose <computeroutput>build</computeroutput> as the path to deploy.</para><para><bold>To setup continuous delivery:</bold></para><para>With this setup Netlify will build and deploy when you push to git or open a pull request:</para><para><orderedlist>
<listitem><para><ulink url="https://app.netlify.com/signup">Start a new netlify project</ulink></para></listitem><listitem><para>Pick your Git hosting service and select your repository</para></listitem><listitem><para>Click <computeroutput>Build your site</computeroutput></para></listitem></orderedlist>
</para><para><bold>Support for client-side routing:</bold></para><para>To support <computeroutput>pushState</computeroutput>, make sure to create a <computeroutput>public/_redirects</computeroutput> file with the following rewrite rules:</para><para>``` /* /index.html 200 ```</para><para>When you build the project, Create React App will place the <computeroutput>public</computeroutput> folder contents into the build output.</para><para><heading level="3"><ulink url="https://zeit.co/now">Now</ulink></heading>
</para><para></para><para>Now offers a zero-configuration single-command deployment. You can use <computeroutput>now</computeroutput> to deploy your app for free.</para><para><orderedlist>
<listitem><para>Install the <computeroutput>now</computeroutput> command-line tool either via the recommended <ulink url="https://zeit.co/download">desktop tool</ulink> or via node with <computeroutput>npm install -g now</computeroutput>.</para></listitem><listitem><para>Build your app by running <computeroutput>npm run build</computeroutput>.</para></listitem><listitem><para>Move into the build directory by running <computeroutput>cd build</computeroutput>.</para></listitem><listitem><para>Run <computeroutput>now --name your-project-name</computeroutput> from within the build directory. You will see a <bold>now.sh</bold> URL in your output like this:</para><para>``` &gt; Ready! <ulink url="https://your-project-name-tpspyhtdtk.now.sh">https://your-project-name-tpspyhtdtk.now.sh</ulink> (copied to clipboard) ```</para><para>Paste that URL into your browser when the build is complete, and you will see your deployed app.</para></listitem></orderedlist>
</para><para>Details are available in <ulink url="https://zeit.co/blog/unlimited-static">this article.</ulink></para><para><heading level="3"><ulink url="https://aws.amazon.com/s3">S3</ulink> and <ulink url="https://aws.amazon.com/cloudfront/">CloudFront</ulink></heading>
</para><para></para><para>See this <ulink url="https://medium.com/@omgwtfmarc/deploying-create-react-app-to-s3-or-cloudfront-48dae4ce0af">blog post</ulink> on how to deploy your React app to Amazon Web Services S3 and CloudFront.</para><para><heading level="3"><ulink url="https://surge.sh/">Surge</ulink></heading>
</para><para></para><para>Install the Surge CLI if you haven’t already by running <computeroutput>npm install -g surge</computeroutput>. Run the <computeroutput>surge</computeroutput> command and log in you or create a new account.</para><para>When asked about the project path, make sure to specify the <computeroutput>build</computeroutput> folder, for example:</para><para>```sh project path: /path/to/project/build ```</para><para>Note that in order to support routers that use HTML5 <computeroutput>pushState</computeroutput> API, you may want to rename the <computeroutput>index.html</computeroutput> in your build folder to <computeroutput>200.html</computeroutput> before deploying to Surge. This <ulink url="https://surge.sh/help/adding-a-200-page-for-client-side-routing">ensures that every URL falls back to that file</ulink>.</para><para><heading level="2">Advanced Configuration</heading>
</para><para></para><para>You can adjust various development and production settings by setting environment variables in your shell or with <ulink url="#adding-development-environment-variables-in-env">.env</ulink>.</para><para><table rows="10" cols="4"><row>
<entry thead="yes"><para>Variable </para></entry><entry thead="yes"><para>Development </para></entry><entry thead="yes"><para>Production </para></entry><entry thead="yes"><para>Usage  </para></entry></row>
<row>
<entry thead="no"><para>BROWSER </para></entry><entry thead="no"><para>:white_check_mark: </para></entry><entry thead="no"><para>:x: </para></entry><entry thead="no"><para>By default, Create React App will open the default system browser, favoring Chrome on macOS. Specify a <ulink url="https://github.com/sindresorhus/opn#app">browser</ulink> to override this behavior, or set it to <computeroutput>none</computeroutput> to disable it completely. If you need to customize the way the browser is launched, you can specify a node script instead. Any arguments passed to <computeroutput>npm start</computeroutput> will also be passed to this script, and the url where your app is served will be the last argument. Your script&apos;s file name must have the <computeroutput>.js</computeroutput> extension. </para></entry></row>
<row>
<entry thead="no"><para>HOST </para></entry><entry thead="no"><para>:white_check_mark: </para></entry><entry thead="no"><para>:x: </para></entry><entry thead="no"><para>By default, the development web server binds to <computeroutput>localhost</computeroutput>. You may use this variable to specify a different host. </para></entry></row>
<row>
<entry thead="no"><para>PORT </para></entry><entry thead="no"><para>:white_check_mark: </para></entry><entry thead="no"><para>:x: </para></entry><entry thead="no"><para>By default, the development web server will attempt to listen on port 3000 or prompt you to attempt the next available port. You may use this variable to specify a different port. </para></entry></row>
<row>
<entry thead="no"><para>HTTPS </para></entry><entry thead="no"><para>:white_check_mark: </para></entry><entry thead="no"><para>:x: </para></entry><entry thead="no"><para>When set to <computeroutput>true</computeroutput>, Create React App will run the development server in <computeroutput>https</computeroutput> mode. </para></entry></row>
<row>
<entry thead="no"><para>PUBLIC_URL </para></entry><entry thead="no"><para>:x: </para></entry><entry thead="no"><para>:white_check_mark: </para></entry><entry thead="no"><para>Create React App assumes your application is hosted at the serving web server&apos;s root or a subpath as specified in <ulink url="#building-for-relative-paths">`package.json` (`homepage`)</ulink>. Normally, Create React App ignores the hostname. You may use this variable to force assets to be referenced verbatim to the url you provide (hostname included). This may be particularly useful when using a CDN to host your application. </para></entry></row>
<row>
<entry thead="no"><para>CI </para></entry><entry thead="no"><para>:large_orange_diamond: </para></entry><entry thead="no"><para>:white_check_mark: </para></entry><entry thead="no"><para>When set to <computeroutput>true</computeroutput>, Create React App treats warnings as failures in the build. It also makes the test runner non-watching. Most CIs set this flag by default. </para></entry></row>
<row>
<entry thead="no"><para>REACT_EDITOR </para></entry><entry thead="no"><para>:white_check_mark: </para></entry><entry thead="no"><para>:x: </para></entry><entry thead="no"><para>When an app crashes in development, you will see an error overlay with clickable stack trace. When you click on it, Create React App will try to determine the editor you are using based on currently running processes, and open the relevant source file. You can <ulink url="https://github.com/facebookincubator/create-react-app/issues/2636">send a pull request to detect your editor of choice</ulink>. Setting this environment variable overrides the automatic detection. If you do it, make sure your systems <ulink url="https://en.wikipedia.org/wiki/PATH_(variable">PATH</ulink>) environment variable points to your editor’s bin folder. </para></entry></row>
<row>
<entry thead="no"><para>CHOKIDAR_USEPOLLING </para></entry><entry thead="no"><para>:white_check_mark: </para></entry><entry thead="no"><para>:x: </para></entry><entry thead="no"><para>When set to <computeroutput>true</computeroutput>, the watcher runs in polling mode, as necessary inside a VM. Use this option if <computeroutput>npm start</computeroutput> isn&apos;t detecting changes. </para></entry></row>
<row>
<entry thead="no"><para>GENERATE_SOURCEMAP </para></entry><entry thead="no"><para>:x: </para></entry><entry thead="no"><para>:white_check_mark: </para></entry><entry thead="no"><para>When set to <computeroutput>false</computeroutput>, source maps are not generated for a production build. This solves OOM issues on some smaller machines. </para></entry></row>
</table>
<heading level="2">Troubleshooting</heading>
</para><para></para><para><heading level="3"><computeroutput>npm start</computeroutput> doesn’t detect changes</heading>
</para><para></para><para>When you save a file while <computeroutput>npm start</computeroutput> is running, the browser should refresh with the updated code.<linebreak/>
 If this doesn’t happen, try one of the following workarounds:</para><para><itemizedlist>
<listitem><para>If your project is in a Dropbox folder, try moving it out.</para></listitem><listitem><para>If the watcher doesn’t see a file called <computeroutput>index.js</computeroutput> and you’re referencing it by the folder name, you <ulink url="https://github.com/facebookincubator/create-react-app/issues/1164">need to restart the watcher</ulink> due to a Webpack bug.</para></listitem><listitem><para>Some editors like Vim and IntelliJ have a “safe write” feature that currently breaks the watcher. You will need to disable it. Follow the instructions in <ulink url="https://webpack.js.org/guides/development/#adjusting-your-text-editor">“Adjusting Your Text Editor”</ulink>.</para></listitem><listitem><para>If your project path contains parentheses, try moving the project to a path without them. This is caused by a <ulink url="https://github.com/webpack/watchpack/issues/42">Webpack watcher bug</ulink>.</para></listitem><listitem><para>On Linux and macOS, you might need to <ulink url="https://webpack.github.io/docs/troubleshooting.html#not-enough-watchers">tweak system settings</ulink> to allow more watchers.</para></listitem><listitem><para>If the project runs inside a virtual machine such as (a Vagrant provisioned) VirtualBox, create an <computeroutput>.env</computeroutput> file in your project directory if it doesn’t exist, and add <computeroutput>CHOKIDAR_USEPOLLING=true</computeroutput> to it. This ensures that the next time you run <computeroutput>npm start</computeroutput>, the watcher uses the polling mode, as necessary inside a VM.</para></listitem></itemizedlist>
</para><para>If none of these solutions help please leave a comment <ulink url="https://github.com/facebookincubator/create-react-app/issues/659">in this thread</ulink>.</para><para><heading level="3"><computeroutput>npm test</computeroutput> hangs on macOS Sierra</heading>
</para><para></para><para>If you run <computeroutput>npm test</computeroutput> and the console gets stuck after printing <computeroutput>react-scripts test --env=jsdom</computeroutput> to the console there might be a problem with your <ulink url="https://facebook.github.io/watchman/">Watchman</ulink> installation as described in <ulink url="https://github.com/facebookincubator/create-react-app/issues/713">facebookincubator/create-react-app#713</ulink>.</para><para>We recommend deleting <computeroutput>node_modules</computeroutput> in your project and running <computeroutput>npm install</computeroutput> (or <computeroutput>yarn</computeroutput> if you use it) first. If it doesn&apos;t help, you can try one of the numerous workarounds mentioned in these issues:</para><para><itemizedlist>
<listitem><para><ulink url="https://github.com/facebook/jest/issues/1767">facebook/jest#1767</ulink></para></listitem><listitem><para><ulink url="https://github.com/facebook/watchman/issues/358">facebook/watchman#358</ulink></para></listitem><listitem><para><ulink url="https://github.com/ember-cli/ember-cli/issues/6259">ember-cli/ember-cli#6259</ulink></para></listitem></itemizedlist>
</para><para>It is reported that installing Watchman 4.7.0 or newer fixes the issue. If you use <ulink url="http://brew.sh/">Homebrew</ulink>, you can run these commands to update it:</para><para>``` watchman shutdown-server brew update brew reinstall watchman ```</para><para>You can find <ulink url="https://facebook.github.io/watchman/docs/install.html#build-install">other installation methods</ulink> on the Watchman documentation page.</para><para>If this still doesn’t help, try running <computeroutput>launchctl unload -F ~/Library/LaunchAgents/com.github.facebook.watchman.plist</computeroutput>.</para><para>There are also reports that <emphasis>uninstalling</emphasis> Watchman fixes the issue. So if nothing else helps, remove it from your system and try again.</para><para><heading level="3"><computeroutput>npm run build</computeroutput> exits too early</heading>
</para><para></para><para>It is reported that <computeroutput>npm run build</computeroutput> can fail on machines with limited memory and no swap space, which is common in cloud environments. Even with small projects this command can increase RAM usage in your system by hundreds of megabytes, so if you have less than 1 GB of available memory your build is likely to fail with the following message:</para><para><blockquote><para>The build failed because the process exited too early. This probably means the system ran out of memory or someone called <computeroutput>kill -9</computeroutput> on the process.</para><para></para></blockquote></para><para>If you are completely sure that you didn&apos;t terminate the process, consider <ulink url="https://www.digitalocean.com/community/tutorials/how-to-add-swap-on-ubuntu-14-04">adding some swap space</ulink> to the machine you’re building on, or build the project locally.</para><para><heading level="3"><computeroutput>npm run build</computeroutput> fails on Heroku</heading>
</para><para></para><para>This may be a problem with case sensitive filenames. Please refer to <ulink url="#resolving-heroku-deployment-errors">this section</ulink>.</para><para><heading level="3">Moment.js locales are missing</heading>
</para><para></para><para>If you use a <ulink url="https://momentjs.com/">Moment.js</ulink>, you might notice that only the English locale is available by default. This is because the locale files are large, and you probably only need a subset of <ulink url="https://momentjs.com/#multiple-locale-support">all the locales provided by Moment.js</ulink>.</para><para>To add a specific Moment.js locale to your bundle, you need to import it explicitly.<linebreak/>
 For example:</para><para>```js import moment from &apos;moment&apos;; import &apos;moment/locale/fr&apos;; ```</para><para>If import multiple locales this way, you can later switch between them by calling <computeroutput>moment.locale()</computeroutput> with the locale name:</para><para>```js import moment from &apos;moment&apos;; import &apos;moment/locale/fr&apos;; import &apos;moment/locale/es&apos;;</para><para>// ...</para><para>moment.locale(&apos;fr&apos;); ```</para><para>This will only work for locales that have been explicitly imported before.</para><para><heading level="3"><computeroutput>npm run build</computeroutput> fails to minify</heading>
</para><para></para><para>Some third-party packages don&apos;t compile their code to ES5 before publishing to npm. This often causes problems in the ecosystem because neither browsers (except for most modern versions) nor some tools currently support all ES6 features. We recommend to publish code on npm as ES5 at least for a few more years.</para><para><linebreak/>
 To resolve this:</para><para><orderedlist>
<listitem><para>Open an issue on the dependency&apos;s issue tracker and ask that the package be published pre-compiled.<itemizedlist>
<listitem><para>Note: Create React App can consume both CommonJS and ES modules. For Node.js compatibility, it is recommended that the main entry point is CommonJS. However, they can optionally provide an ES module entry point with the <computeroutput>module</computeroutput> field in <computeroutput>package.json</computeroutput>. Note that <bold>even if a library provides an ES Modules version, it should still precompile other ES6 features to ES5 if it intends to support older browsers</bold>.</para></listitem></itemizedlist>
</para></listitem><listitem><para>Fork the package and publish a corrected version yourself.</para></listitem><listitem><para>If the dependency is small enough, copy it to your <computeroutput>src/</computeroutput> folder and treat it as application code.</para></listitem></orderedlist>
</para><para>In the future, we might start automatically compiling incompatible third-party modules, but it is not currently supported. This approach would also slow down the production builds.</para><para><heading level="2">Something Missing?</heading>
</para><para></para><para>If you have ideas for more “How To” recipes that should be on this page, <ulink url="https://github.com/facebookincubator/create-react-app/issues">let us know</ulink> or https://github.com/facebookincubator/create-react-app/edit/master/packages/react-scripts/template/README.md &quot;contribute some!&quot; </para>    </detaileddescription>
  </compounddef>
</doxygen>
